/**
* Blockchain.com Exchange REST API
* ## Introduction Welcome to Blockchain.com's Exchange API and developer documentation. These documents detail and give examples of various functionality offered by the API such as receiving real time market data, requesting balance information and performing trades. ## To Get Started Create or log into your existing Blockchain.com Exchange account Select API from the drop down menu Fill out form and click “Create New API Key Now” Once generated you can view your keys under API Settings 
*
* The version of the OpenAPI document: 1.0.0
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package com.blockchain.exchange.rest.model


import com.squareup.moshi.Json
/**
 * 
 * @param baseCurrency Blockchain symbol identifier
 * @param baseCurrencyScale The number of decimals the currency can be split in
 * @param counterCurrency Blockchain symbol identifier
 * @param counterCurrencyScale The number of decimals the currency can be split in
 * @param minPriceIncrement The price of the instrument must be a multiple of min_price_increment * (10^-min_price_increment_scale)
 * @param minPriceIncrementScale 
 * @param minOrderSize The minimum quantity for an order for this instrument must be min_order_size*(10^-min_order_size_scale)
 * @param minOrderSizeScale 
 * @param maxOrderSize The maximum quantity for an order for this instrument is max_order_size*(10^-max_order_size_scale). If this equal to zero, there is no limit
 * @param maxOrderSizeScale 
 * @param lotSize 
 * @param lotSizeScale 
 * @param status Symbol status; open, close, suspend, halt, halt-freeze.
 * @param id 
 * @param auctionPrice If the symbol is halted and will open on an auction, this will be the opening price.
 * @param auctionSize Opening size
 * @param auctionTime Opening time in HHMM format
 * @param imbalance Auction imbalance. If > 0 then there will be buy orders left over at the auction price. If < 0 then there will be sell orders left over at the auction price.
 */

data class SymbolStatus (
    /* Blockchain symbol identifier */
    @Json(name = "base_currency")
    val baseCurrency: kotlin.String? = null,
    /* The number of decimals the currency can be split in */
    @Json(name = "base_currency_scale")
    val baseCurrencyScale: kotlin.Int? = null,
    /* Blockchain symbol identifier */
    @Json(name = "counter_currency")
    val counterCurrency: kotlin.String? = null,
    /* The number of decimals the currency can be split in */
    @Json(name = "counter_currency_scale")
    val counterCurrencyScale: kotlin.Int? = null,
    /* The price of the instrument must be a multiple of min_price_increment * (10^-min_price_increment_scale) */
    @Json(name = "min_price_increment")
    val minPriceIncrement: kotlin.Long? = null,
    @Json(name = "min_price_increment_scale")
    val minPriceIncrementScale: kotlin.Int? = null,
    /* The minimum quantity for an order for this instrument must be min_order_size*(10^-min_order_size_scale) */
    @Json(name = "min_order_size")
    val minOrderSize: kotlin.Long? = null,
    @Json(name = "min_order_size_scale")
    val minOrderSizeScale: kotlin.Int? = null,
    /* The maximum quantity for an order for this instrument is max_order_size*(10^-max_order_size_scale). If this equal to zero, there is no limit */
    @Json(name = "max_order_size")
    val maxOrderSize: kotlin.Long? = null,
    @Json(name = "max_order_size_scale")
    val maxOrderSizeScale: kotlin.Int? = null,
    @Json(name = "lot_size")
    val lotSize: kotlin.Long? = null,
    @Json(name = "lot_size_scale")
    val lotSizeScale: kotlin.Int? = null,
    /* Symbol status; open, close, suspend, halt, halt-freeze. */
    @Json(name = "status")
    val status: SymbolStatus.Status? = null,
    @Json(name = "id")
    val id: kotlin.Long? = null,
    /* If the symbol is halted and will open on an auction, this will be the opening price. */
    @Json(name = "auction_price")
    val auctionPrice: kotlin.Double? = null,
    /* Opening size */
    @Json(name = "auction_size")
    val auctionSize: kotlin.Double? = null,
    /* Opening time in HHMM format */
    @Json(name = "auction_time")
    val auctionTime: kotlin.Int? = null,
    /* Auction imbalance. If > 0 then there will be buy orders left over at the auction price. If < 0 then there will be sell orders left over at the auction price. */
    @Json(name = "imbalance")
    val imbalance: kotlin.Double? = null
) {

    /**
    * Symbol status; open, close, suspend, halt, halt-freeze.
    * Values: OPEN,CLOSE,SUSPEND,HALT,HALT_MINUS_FREEZE
    */
    
    enum class Status(val value: kotlin.String){
        @Json(name = "open") OPEN("open"),
        @Json(name = "close") CLOSE("close"),
        @Json(name = "suspend") SUSPEND("suspend"),
        @Json(name = "halt") HALT("halt"),
        @Json(name = "halt-freeze") HALT_MINUS_FREEZE("halt-freeze");
    }
}

