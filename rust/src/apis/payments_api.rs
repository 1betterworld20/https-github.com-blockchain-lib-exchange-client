/*
 * Blockchain.com Exchange REST API
 *
 * ## Introduction Welcome to Blockchain.com's Exchange API and developer documentation. \\ These documents detail and give examples of various functionality offered by the API such as receiving real time market data, requesting balance information and performing trades. ## To Get Started Create or log into your existing Blockchain.com Exchange account \\ Select API from the drop down menu \\ Fill out form and click “Create New API Key Now” \\ Once generated you can view your keys under API Settings. \\ Please be aware that the API key can only be used once it was verified via email.  The API key must be set via the \\ `X-API-Token`\\ header.  The base URL to be used for all calls is \\ `https://api.blockchain.com/v3/exchange`  Autogenerated clients for this API can be found [here](https://github.com/blockchain/lib-exchange-client). 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use std::rc::Rc;
use std::borrow::Borrow;
#[allow(unused_imports)]
use std::option::Option;

use hyper;
use serde_json;
use futures::Future;

use super::{Error, configuration};
use super::request as __internal_request;

pub struct PaymentsApiClient<C: hyper::client::Connect> {
    configuration: Rc<configuration::Configuration<C>>,
}

impl<C: hyper::client::Connect> PaymentsApiClient<C> {
    pub fn new(configuration: Rc<configuration::Configuration<C>>) -> PaymentsApiClient<C> {
        PaymentsApiClient {
            configuration,
        }
    }
}

pub trait PaymentsApi {
    fn create_withdrawal(&self, create_withdrawal_request: crate::models::CreateWithdrawalRequest) -> Box<dyn Future<Item = crate::models::WithdrawalInfo, Error = Error<serde_json::Value>>>;
    fn get_account_by_type_and_currency(&self, account: &str, currency: &str) -> Box<dyn Future<Item = crate::models::Balance, Error = Error<serde_json::Value>>>;
    fn get_accounts(&self, ) -> Box<dyn Future<Item = crate::models::BalanceMap, Error = Error<serde_json::Value>>>;
    fn get_deposit_address(&self, currency: &str) -> Box<dyn Future<Item = crate::models::DepositAddressCrypto, Error = Error<serde_json::Value>>>;
    fn get_deposit_by_id(&self, deposit_id: &str) -> Box<dyn Future<Item = crate::models::DepositInfo, Error = Error<serde_json::Value>>>;
    fn get_deposits(&self, from: Option<i64>, to: Option<i64>) -> Box<dyn Future<Item = Vec<crate::models::DepositInfo>, Error = Error<serde_json::Value>>>;
    fn get_whitelist(&self, ) -> Box<dyn Future<Item = Vec<crate::models::WhitelistEntry>, Error = Error<serde_json::Value>>>;
    fn get_whitelist_by_currency(&self, currency: &str) -> Box<dyn Future<Item = Vec<crate::models::WhitelistEntry>, Error = Error<serde_json::Value>>>;
    fn get_withdrawal_by_id(&self, withdrawal_id: &str) -> Box<dyn Future<Item = crate::models::WithdrawalInfo, Error = Error<serde_json::Value>>>;
    fn get_withdrawals(&self, from: Option<i64>, to: Option<i64>) -> Box<dyn Future<Item = Vec<crate::models::WithdrawalInfo>, Error = Error<serde_json::Value>>>;
}

impl<C: hyper::client::Connect>PaymentsApi for PaymentsApiClient<C> {
    fn create_withdrawal(&self, create_withdrawal_request: crate::models::CreateWithdrawalRequest) -> Box<dyn Future<Item = crate::models::WithdrawalInfo, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/withdrawals".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "X-API-Token".to_owned(),
            }))
        ;
        req = req.with_body_param(create_withdrawal_request);

        req.execute(self.configuration.borrow())
    }

    fn get_account_by_type_and_currency(&self, account: &str, currency: &str) -> Box<dyn Future<Item = crate::models::Balance, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/accounts/{account}/{currency}".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "X-API-Token".to_owned(),
            }))
        ;
        req = req.with_path_param("account".to_string(), account.to_string());
        req = req.with_path_param("currency".to_string(), currency.to_string());

        req.execute(self.configuration.borrow())
    }

    fn get_accounts(&self, ) -> Box<dyn Future<Item = crate::models::BalanceMap, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/accounts".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "X-API-Token".to_owned(),
            }))
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_deposit_address(&self, currency: &str) -> Box<dyn Future<Item = crate::models::DepositAddressCrypto, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/deposits/{currency}".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "X-API-Token".to_owned(),
            }))
        ;
        req = req.with_path_param("currency".to_string(), currency.to_string());

        req.execute(self.configuration.borrow())
    }

    fn get_deposit_by_id(&self, deposit_id: &str) -> Box<dyn Future<Item = crate::models::DepositInfo, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/deposits/{depositId}".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "X-API-Token".to_owned(),
            }))
        ;
        req = req.with_path_param("depositId".to_string(), deposit_id.to_string());

        req.execute(self.configuration.borrow())
    }

    fn get_deposits(&self, from: Option<i64>, to: Option<i64>) -> Box<dyn Future<Item = Vec<crate::models::DepositInfo>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/deposits".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "X-API-Token".to_owned(),
            }))
        ;
        if let Some(ref s) = from {
            req = req.with_query_param("from".to_string(), s.to_string());
        }
        if let Some(ref s) = to {
            req = req.with_query_param("to".to_string(), s.to_string());
        }

        req.execute(self.configuration.borrow())
    }

    fn get_whitelist(&self, ) -> Box<dyn Future<Item = Vec<crate::models::WhitelistEntry>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/whitelist".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "X-API-Token".to_owned(),
            }))
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_whitelist_by_currency(&self, currency: &str) -> Box<dyn Future<Item = Vec<crate::models::WhitelistEntry>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/whitelist/{currency}".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "X-API-Token".to_owned(),
            }))
        ;
        req = req.with_path_param("currency".to_string(), currency.to_string());

        req.execute(self.configuration.borrow())
    }

    fn get_withdrawal_by_id(&self, withdrawal_id: &str) -> Box<dyn Future<Item = crate::models::WithdrawalInfo, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/withdrawals/{withdrawalId}".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "X-API-Token".to_owned(),
            }))
        ;
        req = req.with_path_param("withdrawalId".to_string(), withdrawal_id.to_string());

        req.execute(self.configuration.borrow())
    }

    fn get_withdrawals(&self, from: Option<i64>, to: Option<i64>) -> Box<dyn Future<Item = Vec<crate::models::WithdrawalInfo>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/withdrawals".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "X-API-Token".to_owned(),
            }))
        ;
        if let Some(ref s) = from {
            req = req.with_query_param("from".to_string(), s.to_string());
        }
        if let Some(ref s) = to {
            req = req.with_query_param("to".to_string(), s.to_string());
        }

        req.execute(self.configuration.borrow())
    }

}
