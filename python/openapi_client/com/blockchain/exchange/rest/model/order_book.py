# coding: utf-8

"""
    Blockchain.com Exchange REST API

    ## Introduction Welcome to Blockchain.com's Exchange API and developer documentation. \\ These documents detail and give examples of various functionality offered by the API such as receiving real time market data, requesting balance information and performing trades. ## To Get Started Create or log into your existing Blockchain.com Exchange account \\ Select API from the drop down menu \\ Fill out form and click “Create New API Key Now” \\ Once generated you can view your keys under API Settings. \\ Please be aware that the API key can only be used once it was verified via email.  The API key must be set via the \\ `X-API-Token`\\ header.  The base URL to be used for all calls is \\ `https://api.blockchain.com/v3/exchange`  Autogenerated clients for this API can be found [here](https://github.com/blockchain/lib-exchange-client).   # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class OrderBook(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'symbol': 'str',
        'bids': 'list[OrderBookEntry]',
        'asks': 'list[OrderBookEntry]'
    }

    attribute_map = {
        'symbol': 'symbol',
        'bids': 'bids',
        'asks': 'asks'
    }

    def __init__(self, symbol=None, bids=None, asks=None, local_vars_configuration=None):  # noqa: E501
        """OrderBook - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._symbol = None
        self._bids = None
        self._asks = None
        self.discriminator = None

        if symbol is not None:
            self.symbol = symbol
        if bids is not None:
            self.bids = bids
        if asks is not None:
            self.asks = asks

    @property
    def symbol(self):
        """Gets the symbol of this OrderBook.  # noqa: E501

        Blockchain symbol identifier  # noqa: E501

        :return: The symbol of this OrderBook.  # noqa: E501
        :rtype: str
        """
        return self._symbol

    @symbol.setter
    def symbol(self, symbol):
        """Sets the symbol of this OrderBook.

        Blockchain symbol identifier  # noqa: E501

        :param symbol: The symbol of this OrderBook.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                symbol is not None and not re.search(r'^[A-Z]{3,5}-[A-Z]{3,5}$', symbol)):  # noqa: E501
            raise ValueError(r"Invalid value for `symbol`, must be a follow pattern or equal to `/^[A-Z]{3,5}-[A-Z]{3,5}$/`")  # noqa: E501

        self._symbol = symbol

    @property
    def bids(self):
        """Gets the bids of this OrderBook.  # noqa: E501


        :return: The bids of this OrderBook.  # noqa: E501
        :rtype: list[OrderBookEntry]
        """
        return self._bids

    @bids.setter
    def bids(self, bids):
        """Sets the bids of this OrderBook.


        :param bids: The bids of this OrderBook.  # noqa: E501
        :type: list[OrderBookEntry]
        """

        self._bids = bids

    @property
    def asks(self):
        """Gets the asks of this OrderBook.  # noqa: E501


        :return: The asks of this OrderBook.  # noqa: E501
        :rtype: list[OrderBookEntry]
        """
        return self._asks

    @asks.setter
    def asks(self, asks):
        """Sets the asks of this OrderBook.


        :param asks: The asks of this OrderBook.  # noqa: E501
        :type: list[OrderBookEntry]
        """

        self._asks = asks

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OrderBook):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, OrderBook):
            return True

        return self.to_dict() != other.to_dict()
