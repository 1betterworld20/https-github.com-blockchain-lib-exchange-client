# coding: utf-8

"""
    Blockchain.com Exchange REST API

    ## Introduction Welcome to Blockchain.com's Exchange API and developer documentation. These documents detail and give examples of various functionality offered by the API such as receiving real time market data, requesting balance information and performing trades. ## To Get Started Create or log into your existing Blockchain.com Exchange account Select API from the drop down menu Fill out form and click “Create New API Key Now” Once generated you can view your keys under API Settings   # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class Balance(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'currency': 'str',
        'balance': 'float',
        'available': 'float',
        'balance_local': 'float',
        'available_local': 'float',
        'rate': 'float'
    }

    attribute_map = {
        'currency': 'currency',
        'balance': 'balance',
        'available': 'available',
        'balance_local': 'balance_local',
        'available_local': 'available_local',
        'rate': 'rate'
    }

    def __init__(self, currency=None, balance=None, available=None, balance_local=None, available_local=None, rate=None, local_vars_configuration=None):  # noqa: E501
        """Balance - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._currency = None
        self._balance = None
        self._available = None
        self._balance_local = None
        self._available_local = None
        self._rate = None
        self.discriminator = None

        self.currency = currency
        self.balance = balance
        self.available = available
        self.balance_local = balance_local
        self.available_local = available_local
        self.rate = rate

    @property
    def currency(self):
        """Gets the currency of this Balance.  # noqa: E501


        :return: The currency of this Balance.  # noqa: E501
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this Balance.


        :param currency: The currency of this Balance.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and currency is None:  # noqa: E501
            raise ValueError("Invalid value for `currency`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                currency is not None and not re.search(r'^[A-Z]{3,5}$', currency)):  # noqa: E501
            raise ValueError(r"Invalid value for `currency`, must be a follow pattern or equal to `/^[A-Z]{3,5}$/`")  # noqa: E501

        self._currency = currency

    @property
    def balance(self):
        """Gets the balance of this Balance.  # noqa: E501


        :return: The balance of this Balance.  # noqa: E501
        :rtype: float
        """
        return self._balance

    @balance.setter
    def balance(self, balance):
        """Sets the balance of this Balance.


        :param balance: The balance of this Balance.  # noqa: E501
        :type: float
        """
        if self.local_vars_configuration.client_side_validation and balance is None:  # noqa: E501
            raise ValueError("Invalid value for `balance`, must not be `None`")  # noqa: E501

        self._balance = balance

    @property
    def available(self):
        """Gets the available of this Balance.  # noqa: E501


        :return: The available of this Balance.  # noqa: E501
        :rtype: float
        """
        return self._available

    @available.setter
    def available(self, available):
        """Sets the available of this Balance.


        :param available: The available of this Balance.  # noqa: E501
        :type: float
        """
        if self.local_vars_configuration.client_side_validation and available is None:  # noqa: E501
            raise ValueError("Invalid value for `available`, must not be `None`")  # noqa: E501

        self._available = available

    @property
    def balance_local(self):
        """Gets the balance_local of this Balance.  # noqa: E501


        :return: The balance_local of this Balance.  # noqa: E501
        :rtype: float
        """
        return self._balance_local

    @balance_local.setter
    def balance_local(self, balance_local):
        """Sets the balance_local of this Balance.


        :param balance_local: The balance_local of this Balance.  # noqa: E501
        :type: float
        """
        if self.local_vars_configuration.client_side_validation and balance_local is None:  # noqa: E501
            raise ValueError("Invalid value for `balance_local`, must not be `None`")  # noqa: E501

        self._balance_local = balance_local

    @property
    def available_local(self):
        """Gets the available_local of this Balance.  # noqa: E501


        :return: The available_local of this Balance.  # noqa: E501
        :rtype: float
        """
        return self._available_local

    @available_local.setter
    def available_local(self, available_local):
        """Sets the available_local of this Balance.


        :param available_local: The available_local of this Balance.  # noqa: E501
        :type: float
        """
        if self.local_vars_configuration.client_side_validation and available_local is None:  # noqa: E501
            raise ValueError("Invalid value for `available_local`, must not be `None`")  # noqa: E501

        self._available_local = available_local

    @property
    def rate(self):
        """Gets the rate of this Balance.  # noqa: E501


        :return: The rate of this Balance.  # noqa: E501
        :rtype: float
        """
        return self._rate

    @rate.setter
    def rate(self, rate):
        """Sets the rate of this Balance.


        :param rate: The rate of this Balance.  # noqa: E501
        :type: float
        """
        if self.local_vars_configuration.client_side_validation and rate is None:  # noqa: E501
            raise ValueError("Invalid value for `rate`, must not be `None`")  # noqa: E501

        self._rate = rate

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Balance):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Balance):
            return True

        return self.to_dict() != other.to_dict()
