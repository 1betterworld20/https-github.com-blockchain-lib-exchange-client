# coding: utf-8

"""
    Blockchain.com Exchange REST API

    ## Introduction Welcome to Blockchain.com's Exchange API and developer documentation. \\ These documents detail and give examples of various functionality offered by the API such as receiving real time market data, requesting balance information and performing trades. ## To Get Started Create or log into your existing Blockchain.com Exchange account \\ Select API from the drop down menu \\ Fill out form and click “Create New API Key Now” \\ Once generated you can view your keys under API Settings. \\ Please be aware that the API key can only be used once it was verified via email.  The API key must be set via the \\ `X-API-Token`\\ header.  The base URL to be used for all calls is \\ `https://api.blockchain.com/v3/exchange`  Autogenerated clients for this API can be found [here](https://github.com/blockchain/lib-exchange-client).   # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class DepositInfo(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'deposit_id': 'str',
        'amount': 'float',
        'currency': 'str',
        'address': 'str',
        'tx_hash': 'str',
        'state': 'str',
        'timestamp': 'int'
    }

    attribute_map = {
        'deposit_id': 'depositId',
        'amount': 'amount',
        'currency': 'currency',
        'address': 'address',
        'tx_hash': 'txHash',
        'state': 'state',
        'timestamp': 'timestamp'
    }

    def __init__(self, deposit_id=None, amount=None, currency=None, address=None, tx_hash=None, state=None, timestamp=None, local_vars_configuration=None):  # noqa: E501
        """DepositInfo - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._deposit_id = None
        self._amount = None
        self._currency = None
        self._address = None
        self._tx_hash = None
        self._state = None
        self._timestamp = None
        self.discriminator = None

        self.deposit_id = deposit_id
        self.amount = amount
        self.currency = currency
        self.address = address
        if tx_hash is not None:
            self.tx_hash = tx_hash
        self.state = state
        if timestamp is not None:
            self.timestamp = timestamp

    @property
    def deposit_id(self):
        """Gets the deposit_id of this DepositInfo.  # noqa: E501

        Unique ID for this withdrawal  # noqa: E501

        :return: The deposit_id of this DepositInfo.  # noqa: E501
        :rtype: str
        """
        return self._deposit_id

    @deposit_id.setter
    def deposit_id(self, deposit_id):
        """Sets the deposit_id of this DepositInfo.

        Unique ID for this withdrawal  # noqa: E501

        :param deposit_id: The deposit_id of this DepositInfo.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and deposit_id is None:  # noqa: E501
            raise ValueError("Invalid value for `deposit_id`, must not be `None`")  # noqa: E501

        self._deposit_id = deposit_id

    @property
    def amount(self):
        """Gets the amount of this DepositInfo.  # noqa: E501

        The amount that is credited in the currency specified  # noqa: E501

        :return: The amount of this DepositInfo.  # noqa: E501
        :rtype: float
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this DepositInfo.

        The amount that is credited in the currency specified  # noqa: E501

        :param amount: The amount of this DepositInfo.  # noqa: E501
        :type: float
        """
        if self.local_vars_configuration.client_side_validation and amount is None:  # noqa: E501
            raise ValueError("Invalid value for `amount`, must not be `None`")  # noqa: E501

        self._amount = amount

    @property
    def currency(self):
        """Gets the currency of this DepositInfo.  # noqa: E501


        :return: The currency of this DepositInfo.  # noqa: E501
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this DepositInfo.


        :param currency: The currency of this DepositInfo.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and currency is None:  # noqa: E501
            raise ValueError("Invalid value for `currency`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                currency is not None and not re.search(r'^[A-Z]{3,5}$', currency)):  # noqa: E501
            raise ValueError(r"Invalid value for `currency`, must be a follow pattern or equal to `/^[A-Z]{3,5}$/`")  # noqa: E501

        self._currency = currency

    @property
    def address(self):
        """Gets the address of this DepositInfo.  # noqa: E501

        Address to deposit to. If a tag or memo must be used, it is separated by a colon.  # noqa: E501

        :return: The address of this DepositInfo.  # noqa: E501
        :rtype: str
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this DepositInfo.

        Address to deposit to. If a tag or memo must be used, it is separated by a colon.  # noqa: E501

        :param address: The address of this DepositInfo.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and address is None:  # noqa: E501
            raise ValueError("Invalid value for `address`, must not be `None`")  # noqa: E501

        self._address = address

    @property
    def tx_hash(self):
        """Gets the tx_hash of this DepositInfo.  # noqa: E501

        The transaction hash of the transaction that deposited funds  # noqa: E501

        :return: The tx_hash of this DepositInfo.  # noqa: E501
        :rtype: str
        """
        return self._tx_hash

    @tx_hash.setter
    def tx_hash(self, tx_hash):
        """Sets the tx_hash of this DepositInfo.

        The transaction hash of the transaction that deposited funds  # noqa: E501

        :param tx_hash: The tx_hash of this DepositInfo.  # noqa: E501
        :type: str
        """

        self._tx_hash = tx_hash

    @property
    def state(self):
        """Gets the state of this DepositInfo.  # noqa: E501


        :return: The state of this DepositInfo.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this DepositInfo.


        :param state: The state of this DepositInfo.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and state is None:  # noqa: E501
            raise ValueError("Invalid value for `state`, must not be `None`")  # noqa: E501
        allowed_values = ["REJECTED", "UNCONFIRMED", "COMPLETED"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and state not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"  # noqa: E501
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def timestamp(self):
        """Gets the timestamp of this DepositInfo.  # noqa: E501

        Time in ms since 01/01/1970 (epoch)  # noqa: E501

        :return: The timestamp of this DepositInfo.  # noqa: E501
        :rtype: int
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this DepositInfo.

        Time in ms since 01/01/1970 (epoch)  # noqa: E501

        :param timestamp: The timestamp of this DepositInfo.  # noqa: E501
        :type: int
        """

        self._timestamp = timestamp

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DepositInfo):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, DepositInfo):
            return True

        return self.to_dict() != other.to_dict()
