# coding: utf-8

"""
    Blockchain.com Exchange REST API

    ## Introduction Welcome to Blockchain.com's Exchange API and developer documentation. \\ These documents detail and give examples of various functionality offered by the API such as receiving real time market data, requesting balance information and performing trades. ## To Get Started Create or log into your existing Blockchain.com Exchange account \\ Select API from the drop down menu \\ Fill out form and click “Create New API Key Now” \\ Once generated you can view your keys under API Settings. \\ Please be aware that the API key can only be used once it was verified via email.  The API key must be set via the \\ `X-API-Token`\\ header.  The base URL to be used for all calls is \\ `https://api.blockchain.com/v3/exchange`  Autogenerated clients for this API can be found [here](https://github.com/blockchain/lib-exchange-client).   # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class Fees(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'maker_rate': 'float',
        'taker_rate': 'float',
        'volume_in_usd': 'float'
    }

    attribute_map = {
        'maker_rate': 'makerRate',
        'taker_rate': 'takerRate',
        'volume_in_usd': 'volumeInUSD'
    }

    def __init__(self, maker_rate=None, taker_rate=None, volume_in_usd=None, local_vars_configuration=None):  # noqa: E501
        """Fees - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._maker_rate = None
        self._taker_rate = None
        self._volume_in_usd = None
        self.discriminator = None

        self.maker_rate = maker_rate
        self.taker_rate = taker_rate
        self.volume_in_usd = volume_in_usd

    @property
    def maker_rate(self):
        """Gets the maker_rate of this Fees.  # noqa: E501


        :return: The maker_rate of this Fees.  # noqa: E501
        :rtype: float
        """
        return self._maker_rate

    @maker_rate.setter
    def maker_rate(self, maker_rate):
        """Sets the maker_rate of this Fees.


        :param maker_rate: The maker_rate of this Fees.  # noqa: E501
        :type: float
        """
        if self.local_vars_configuration.client_side_validation and maker_rate is None:  # noqa: E501
            raise ValueError("Invalid value for `maker_rate`, must not be `None`")  # noqa: E501

        self._maker_rate = maker_rate

    @property
    def taker_rate(self):
        """Gets the taker_rate of this Fees.  # noqa: E501


        :return: The taker_rate of this Fees.  # noqa: E501
        :rtype: float
        """
        return self._taker_rate

    @taker_rate.setter
    def taker_rate(self, taker_rate):
        """Sets the taker_rate of this Fees.


        :param taker_rate: The taker_rate of this Fees.  # noqa: E501
        :type: float
        """
        if self.local_vars_configuration.client_side_validation and taker_rate is None:  # noqa: E501
            raise ValueError("Invalid value for `taker_rate`, must not be `None`")  # noqa: E501

        self._taker_rate = taker_rate

    @property
    def volume_in_usd(self):
        """Gets the volume_in_usd of this Fees.  # noqa: E501


        :return: The volume_in_usd of this Fees.  # noqa: E501
        :rtype: float
        """
        return self._volume_in_usd

    @volume_in_usd.setter
    def volume_in_usd(self, volume_in_usd):
        """Sets the volume_in_usd of this Fees.


        :param volume_in_usd: The volume_in_usd of this Fees.  # noqa: E501
        :type: float
        """
        if self.local_vars_configuration.client_side_validation and volume_in_usd is None:  # noqa: E501
            raise ValueError("Invalid value for `volume_in_usd`, must not be `None`")  # noqa: E501

        self._volume_in_usd = volume_in_usd

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Fees):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Fees):
            return True

        return self.to_dict() != other.to_dict()
