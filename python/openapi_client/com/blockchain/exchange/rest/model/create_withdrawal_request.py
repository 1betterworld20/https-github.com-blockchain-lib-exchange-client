# coding: utf-8

"""
    Blockchain.com Exchange REST API

    ## Introduction Welcome to Blockchain.com's Exchange API and developer documentation. These documents detail and give examples of various functionality offered by the API such as receiving real time market data, requesting balance information and performing trades. ## To Get Started Create or log into your existing Blockchain.com Exchange account Select API from the drop down menu Fill out form and click “Create New API Key Now” Once generated you can view your keys under API Settings   # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class CreateWithdrawalRequest(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'amount': 'float',
        'currency': 'str',
        'beneficiary': 'str',
        'send_max': 'bool'
    }

    attribute_map = {
        'amount': 'amount',
        'currency': 'currency',
        'beneficiary': 'beneficiary',
        'send_max': 'sendMax'
    }

    def __init__(self, amount=None, currency=None, beneficiary=None, send_max=None, local_vars_configuration=None):  # noqa: E501
        """CreateWithdrawalRequest - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._amount = None
        self._currency = None
        self._beneficiary = None
        self._send_max = None
        self.discriminator = None

        if amount is not None:
            self.amount = amount
        self.currency = currency
        self.beneficiary = beneficiary
        if send_max is not None:
            self.send_max = send_max

    @property
    def amount(self):
        """Gets the amount of this CreateWithdrawalRequest.  # noqa: E501

        The amount to withdraw in the currency specified  # noqa: E501

        :return: The amount of this CreateWithdrawalRequest.  # noqa: E501
        :rtype: float
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this CreateWithdrawalRequest.

        The amount to withdraw in the currency specified  # noqa: E501

        :param amount: The amount of this CreateWithdrawalRequest.  # noqa: E501
        :type: float
        """

        self._amount = amount

    @property
    def currency(self):
        """Gets the currency of this CreateWithdrawalRequest.  # noqa: E501


        :return: The currency of this CreateWithdrawalRequest.  # noqa: E501
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this CreateWithdrawalRequest.


        :param currency: The currency of this CreateWithdrawalRequest.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and currency is None:  # noqa: E501
            raise ValueError("Invalid value for `currency`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                currency is not None and not re.search(r'^[A-Z]{3,5}$', currency)):  # noqa: E501
            raise ValueError(r"Invalid value for `currency`, must be a follow pattern or equal to `/^[A-Z]{3,5}$/`")  # noqa: E501

        self._currency = currency

    @property
    def beneficiary(self):
        """Gets the beneficiary of this CreateWithdrawalRequest.  # noqa: E501


        :return: The beneficiary of this CreateWithdrawalRequest.  # noqa: E501
        :rtype: str
        """
        return self._beneficiary

    @beneficiary.setter
    def beneficiary(self, beneficiary):
        """Sets the beneficiary of this CreateWithdrawalRequest.


        :param beneficiary: The beneficiary of this CreateWithdrawalRequest.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and beneficiary is None:  # noqa: E501
            raise ValueError("Invalid value for `beneficiary`, must not be `None`")  # noqa: E501

        self._beneficiary = beneficiary

    @property
    def send_max(self):
        """Gets the send_max of this CreateWithdrawalRequest.  # noqa: E501

        If set, sends the full available amount, minus fees. Amount may not be specified in that case.   # noqa: E501

        :return: The send_max of this CreateWithdrawalRequest.  # noqa: E501
        :rtype: bool
        """
        return self._send_max

    @send_max.setter
    def send_max(self, send_max):
        """Sets the send_max of this CreateWithdrawalRequest.

        If set, sends the full available amount, minus fees. Amount may not be specified in that case.   # noqa: E501

        :param send_max: The send_max of this CreateWithdrawalRequest.  # noqa: E501
        :type: bool
        """

        self._send_max = send_max

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CreateWithdrawalRequest):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CreateWithdrawalRequest):
            return True

        return self.to_dict() != other.to_dict()
