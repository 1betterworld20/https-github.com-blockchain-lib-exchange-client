# coding: utf-8

"""
    Blockchain.com Exchange REST API

    ## Introduction Welcome to Blockchain.com's Exchange API and developer documentation. These documents detail and give examples of various functionality offered by the API such as receiving real time market data, requesting balance information and performing trades. ## To Get Started Create or log into your existing Blockchain.com Exchange account Select API from the drop down menu Fill out form and click “Create New API Key Now” Once generated you can view your keys under API Settings   # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class BaseOrder(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'ord_type': 'str',
        'cl_ord_id': 'str',
        'symbol': 'str',
        'side': 'Side',
        'order_qty': 'float',
        'time_in_force': 'TimeInForce',
        'price': 'float',
        'expire_date': 'int',
        'min_qty': 'float',
        'stop_px': 'float'
    }

    attribute_map = {
        'ord_type': 'ordType',
        'cl_ord_id': 'clOrdId',
        'symbol': 'symbol',
        'side': 'side',
        'order_qty': 'orderQty',
        'time_in_force': 'timeInForce',
        'price': 'price',
        'expire_date': 'expireDate',
        'min_qty': 'minQty',
        'stop_px': 'stopPx'
    }

    def __init__(self, ord_type=None, cl_ord_id=None, symbol=None, side=None, order_qty=None, time_in_force=None, price=None, expire_date=None, min_qty=None, stop_px=None, local_vars_configuration=None):  # noqa: E501
        """BaseOrder - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._ord_type = None
        self._cl_ord_id = None
        self._symbol = None
        self._side = None
        self._order_qty = None
        self._time_in_force = None
        self._price = None
        self._expire_date = None
        self._min_qty = None
        self._stop_px = None
        self.discriminator = None

        if ord_type is not None:
            self.ord_type = ord_type
        self.cl_ord_id = cl_ord_id
        self.symbol = symbol
        self.side = side
        self.order_qty = order_qty
        if time_in_force is not None:
            self.time_in_force = time_in_force
        if price is not None:
            self.price = price
        if expire_date is not None:
            self.expire_date = expire_date
        if min_qty is not None:
            self.min_qty = min_qty
        if stop_px is not None:
            self.stop_px = stop_px

    @property
    def ord_type(self):
        """Gets the ord_type of this BaseOrder.  # noqa: E501


        :return: The ord_type of this BaseOrder.  # noqa: E501
        :rtype: str
        """
        return self._ord_type

    @ord_type.setter
    def ord_type(self, ord_type):
        """Sets the ord_type of this BaseOrder.


        :param ord_type: The ord_type of this BaseOrder.  # noqa: E501
        :type: str
        """
        allowed_values = ["MARKET", "LIMIT", "STOP", "STOPLIMIT"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and ord_type not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `ord_type` ({0}), must be one of {1}"  # noqa: E501
                .format(ord_type, allowed_values)
            )

        self._ord_type = ord_type

    @property
    def cl_ord_id(self):
        """Gets the cl_ord_id of this BaseOrder.  # noqa: E501

        Reference field provided by client and cannot exceed 20 characters  # noqa: E501

        :return: The cl_ord_id of this BaseOrder.  # noqa: E501
        :rtype: str
        """
        return self._cl_ord_id

    @cl_ord_id.setter
    def cl_ord_id(self, cl_ord_id):
        """Sets the cl_ord_id of this BaseOrder.

        Reference field provided by client and cannot exceed 20 characters  # noqa: E501

        :param cl_ord_id: The cl_ord_id of this BaseOrder.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and cl_ord_id is None:  # noqa: E501
            raise ValueError("Invalid value for `cl_ord_id`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                cl_ord_id is not None and len(cl_ord_id) > 20):
            raise ValueError("Invalid value for `cl_ord_id`, length must be less than or equal to `20`")  # noqa: E501

        self._cl_ord_id = cl_ord_id

    @property
    def symbol(self):
        """Gets the symbol of this BaseOrder.  # noqa: E501

        Blockchain symbol identifier  # noqa: E501

        :return: The symbol of this BaseOrder.  # noqa: E501
        :rtype: str
        """
        return self._symbol

    @symbol.setter
    def symbol(self, symbol):
        """Sets the symbol of this BaseOrder.

        Blockchain symbol identifier  # noqa: E501

        :param symbol: The symbol of this BaseOrder.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and symbol is None:  # noqa: E501
            raise ValueError("Invalid value for `symbol`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                symbol is not None and not re.search(r'^[A-Z]{3,5}-[A-Z]{3,5}$', symbol)):  # noqa: E501
            raise ValueError(r"Invalid value for `symbol`, must be a follow pattern or equal to `/^[A-Z]{3,5}-[A-Z]{3,5}$/`")  # noqa: E501

        self._symbol = symbol

    @property
    def side(self):
        """Gets the side of this BaseOrder.  # noqa: E501


        :return: The side of this BaseOrder.  # noqa: E501
        :rtype: Side
        """
        return self._side

    @side.setter
    def side(self, side):
        """Sets the side of this BaseOrder.


        :param side: The side of this BaseOrder.  # noqa: E501
        :type: Side
        """
        if self.local_vars_configuration.client_side_validation and side is None:  # noqa: E501
            raise ValueError("Invalid value for `side`, must not be `None`")  # noqa: E501

        self._side = side

    @property
    def order_qty(self):
        """Gets the order_qty of this BaseOrder.  # noqa: E501

        The order size in the terms of the base currency  # noqa: E501

        :return: The order_qty of this BaseOrder.  # noqa: E501
        :rtype: float
        """
        return self._order_qty

    @order_qty.setter
    def order_qty(self, order_qty):
        """Sets the order_qty of this BaseOrder.

        The order size in the terms of the base currency  # noqa: E501

        :param order_qty: The order_qty of this BaseOrder.  # noqa: E501
        :type: float
        """
        if self.local_vars_configuration.client_side_validation and order_qty is None:  # noqa: E501
            raise ValueError("Invalid value for `order_qty`, must not be `None`")  # noqa: E501

        self._order_qty = order_qty

    @property
    def time_in_force(self):
        """Gets the time_in_force of this BaseOrder.  # noqa: E501


        :return: The time_in_force of this BaseOrder.  # noqa: E501
        :rtype: TimeInForce
        """
        return self._time_in_force

    @time_in_force.setter
    def time_in_force(self, time_in_force):
        """Sets the time_in_force of this BaseOrder.


        :param time_in_force: The time_in_force of this BaseOrder.  # noqa: E501
        :type: TimeInForce
        """

        self._time_in_force = time_in_force

    @property
    def price(self):
        """Gets the price of this BaseOrder.  # noqa: E501

        The limit price for the order  # noqa: E501

        :return: The price of this BaseOrder.  # noqa: E501
        :rtype: float
        """
        return self._price

    @price.setter
    def price(self, price):
        """Sets the price of this BaseOrder.

        The limit price for the order  # noqa: E501

        :param price: The price of this BaseOrder.  # noqa: E501
        :type: float
        """

        self._price = price

    @property
    def expire_date(self):
        """Gets the expire_date of this BaseOrder.  # noqa: E501

        expiry date in the format YYYYMMDD  # noqa: E501

        :return: The expire_date of this BaseOrder.  # noqa: E501
        :rtype: int
        """
        return self._expire_date

    @expire_date.setter
    def expire_date(self, expire_date):
        """Sets the expire_date of this BaseOrder.

        expiry date in the format YYYYMMDD  # noqa: E501

        :param expire_date: The expire_date of this BaseOrder.  # noqa: E501
        :type: int
        """
        if (self.local_vars_configuration.client_side_validation and
                expire_date is not None and expire_date > 20501231):  # noqa: E501
            raise ValueError("Invalid value for `expire_date`, must be a value less than or equal to `20501231`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                expire_date is not None and expire_date < 20200101):  # noqa: E501
            raise ValueError("Invalid value for `expire_date`, must be a value greater than or equal to `20200101`")  # noqa: E501

        self._expire_date = expire_date

    @property
    def min_qty(self):
        """Gets the min_qty of this BaseOrder.  # noqa: E501

        The minimum quantity required for an IOC fill  # noqa: E501

        :return: The min_qty of this BaseOrder.  # noqa: E501
        :rtype: float
        """
        return self._min_qty

    @min_qty.setter
    def min_qty(self, min_qty):
        """Sets the min_qty of this BaseOrder.

        The minimum quantity required for an IOC fill  # noqa: E501

        :param min_qty: The min_qty of this BaseOrder.  # noqa: E501
        :type: float
        """

        self._min_qty = min_qty

    @property
    def stop_px(self):
        """Gets the stop_px of this BaseOrder.  # noqa: E501

        The limit price for the order  # noqa: E501

        :return: The stop_px of this BaseOrder.  # noqa: E501
        :rtype: float
        """
        return self._stop_px

    @stop_px.setter
    def stop_px(self, stop_px):
        """Sets the stop_px of this BaseOrder.

        The limit price for the order  # noqa: E501

        :param stop_px: The stop_px of this BaseOrder.  # noqa: E501
        :type: float
        """

        self._stop_px = stop_px

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BaseOrder):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, BaseOrder):
            return True

        return self.to_dict() != other.to_dict()
