<?php
/**
 * SymbolStatusTest
 *
 * PHP version 5
 *
 * @category Class
 * @package  com.blockchain.exchange.rest
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Blockchain.com Exchange REST API
 *
 * ## Introduction Welcome to Blockchain.com's Exchange API and developer documentation. \\ These documents detail and give examples of various functionality offered by the API such as receiving real time market data, requesting balance information and performing trades. ## To Get Started Create or log into your existing Blockchain.com Exchange account \\ Select API from the drop down menu \\ Fill out form and click “Create New API Key Now” \\ Once generated you can view your keys under API Settings. \\ Please be aware that the API key can only be used once it was verified via email.  The API key must be set via the \\ `X-API-Token`\\ header.  The base URL to be used for all calls is \\ `https://api.blockchain.com/v3/exchange`  Autogenerated clients for this API can be found [here](https://github.com/blockchain/lib-exchange-client).
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.3.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Please update the test case below to test the model.
 */

namespace com.blockchain.exchange.rest;

use PHPUnit\Framework\TestCase;

/**
 * SymbolStatusTest Class Doc Comment
 *
 * @category    Class
 * @description SymbolStatus
 * @package     com.blockchain.exchange.rest
 * @author      OpenAPI Generator team
 * @link        https://openapi-generator.tech
 */
class SymbolStatusTest extends TestCase
{

    /**
     * Setup before running any test case
     */
    public static function setUpBeforeClass()
    {
    }

    /**
     * Setup before running each test case
     */
    public function setUp()
    {
    }

    /**
     * Clean up after running each test case
     */
    public function tearDown()
    {
    }

    /**
     * Clean up after running all test cases
     */
    public static function tearDownAfterClass()
    {
    }

    /**
     * Test "SymbolStatus"
     */
    public function testSymbolStatus()
    {
    }

    /**
     * Test attribute "base_currency"
     */
    public function testPropertyBaseCurrency()
    {
    }

    /**
     * Test attribute "base_currency_scale"
     */
    public function testPropertyBaseCurrencyScale()
    {
    }

    /**
     * Test attribute "counter_currency"
     */
    public function testPropertyCounterCurrency()
    {
    }

    /**
     * Test attribute "counter_currency_scale"
     */
    public function testPropertyCounterCurrencyScale()
    {
    }

    /**
     * Test attribute "min_price_increment"
     */
    public function testPropertyMinPriceIncrement()
    {
    }

    /**
     * Test attribute "min_price_increment_scale"
     */
    public function testPropertyMinPriceIncrementScale()
    {
    }

    /**
     * Test attribute "min_order_size"
     */
    public function testPropertyMinOrderSize()
    {
    }

    /**
     * Test attribute "min_order_size_scale"
     */
    public function testPropertyMinOrderSizeScale()
    {
    }

    /**
     * Test attribute "max_order_size"
     */
    public function testPropertyMaxOrderSize()
    {
    }

    /**
     * Test attribute "max_order_size_scale"
     */
    public function testPropertyMaxOrderSizeScale()
    {
    }

    /**
     * Test attribute "lot_size"
     */
    public function testPropertyLotSize()
    {
    }

    /**
     * Test attribute "lot_size_scale"
     */
    public function testPropertyLotSizeScale()
    {
    }

    /**
     * Test attribute "status"
     */
    public function testPropertyStatus()
    {
    }

    /**
     * Test attribute "id"
     */
    public function testPropertyId()
    {
    }

    /**
     * Test attribute "auction_price"
     */
    public function testPropertyAuctionPrice()
    {
    }

    /**
     * Test attribute "auction_size"
     */
    public function testPropertyAuctionSize()
    {
    }

    /**
     * Test attribute "auction_time"
     */
    public function testPropertyAuctionTime()
    {
    }

    /**
     * Test attribute "imbalance"
     */
    public function testPropertyImbalance()
    {
    }
}
