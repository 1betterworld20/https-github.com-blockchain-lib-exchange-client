<?php
/**
 * OrderSummary
 *
 * PHP version 5
 *
 * @category Class
 * @package  com.blockchain.exchange.rest
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Blockchain.com Exchange REST API
 *
 * ## Introduction Welcome to Blockchain.com's Exchange API and developer documentation. These documents detail and give examples of various functionality offered by the API such as receiving real time market data, requesting balance information and performing trades. ## To Get Started Create or log into your existing Blockchain.com Exchange account Select API from the drop down menu Fill out form and click “Create New API Key Now” Once generated you can view your keys under API Settings
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.3.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace com.blockchain.exchange.rest\com.blockchain.exchange.rest.model;

use \ArrayAccess;
use \com.blockchain.exchange.rest\ObjectSerializer;

/**
 * OrderSummary Class Doc Comment
 *
 * @category Class
 * @package  com.blockchain.exchange.rest
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class OrderSummary implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'OrderSummary';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'ex_ord_id' => 'int',
        'cl_ord_id' => 'string',
        'ord_status' => '\com.blockchain.exchange.rest\com.blockchain.exchange.rest.model\OrderStatus',
        'side' => '\com.blockchain.exchange.rest\com.blockchain.exchange.rest.model\Side',
        'text' => 'string',
        'symbol' => 'string',
        'last_shares' => 'double',
        'last_px' => 'double',
        'leaves_qty' => 'double',
        'cum_qty' => 'double',
        'avg_px' => 'double',
        'timestamp' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'ex_ord_id' => 'int64',
        'cl_ord_id' => null,
        'ord_status' => null,
        'side' => null,
        'text' => null,
        'symbol' => null,
        'last_shares' => 'double',
        'last_px' => 'double',
        'leaves_qty' => 'double',
        'cum_qty' => 'double',
        'avg_px' => 'double',
        'timestamp' => 'int64'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'ex_ord_id' => 'exOrdId',
        'cl_ord_id' => 'clOrdId',
        'ord_status' => 'ordStatus',
        'side' => 'side',
        'text' => 'text',
        'symbol' => 'symbol',
        'last_shares' => 'lastShares',
        'last_px' => 'lastPx',
        'leaves_qty' => 'leavesQty',
        'cum_qty' => 'cumQty',
        'avg_px' => 'avgPx',
        'timestamp' => 'timestamp'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'ex_ord_id' => 'setExOrdId',
        'cl_ord_id' => 'setClOrdId',
        'ord_status' => 'setOrdStatus',
        'side' => 'setSide',
        'text' => 'setText',
        'symbol' => 'setSymbol',
        'last_shares' => 'setLastShares',
        'last_px' => 'setLastPx',
        'leaves_qty' => 'setLeavesQty',
        'cum_qty' => 'setCumQty',
        'avg_px' => 'setAvgPx',
        'timestamp' => 'setTimestamp'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'ex_ord_id' => 'getExOrdId',
        'cl_ord_id' => 'getClOrdId',
        'ord_status' => 'getOrdStatus',
        'side' => 'getSide',
        'text' => 'getText',
        'symbol' => 'getSymbol',
        'last_shares' => 'getLastShares',
        'last_px' => 'getLastPx',
        'leaves_qty' => 'getLeavesQty',
        'cum_qty' => 'getCumQty',
        'avg_px' => 'getAvgPx',
        'timestamp' => 'getTimestamp'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['ex_ord_id'] = isset($data['ex_ord_id']) ? $data['ex_ord_id'] : null;
        $this->container['cl_ord_id'] = isset($data['cl_ord_id']) ? $data['cl_ord_id'] : null;
        $this->container['ord_status'] = isset($data['ord_status']) ? $data['ord_status'] : null;
        $this->container['side'] = isset($data['side']) ? $data['side'] : null;
        $this->container['text'] = isset($data['text']) ? $data['text'] : null;
        $this->container['symbol'] = isset($data['symbol']) ? $data['symbol'] : null;
        $this->container['last_shares'] = isset($data['last_shares']) ? $data['last_shares'] : null;
        $this->container['last_px'] = isset($data['last_px']) ? $data['last_px'] : null;
        $this->container['leaves_qty'] = isset($data['leaves_qty']) ? $data['leaves_qty'] : null;
        $this->container['cum_qty'] = isset($data['cum_qty']) ? $data['cum_qty'] : null;
        $this->container['avg_px'] = isset($data['avg_px']) ? $data['avg_px'] : null;
        $this->container['timestamp'] = isset($data['timestamp']) ? $data['timestamp'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['cl_ord_id']) && (mb_strlen($this->container['cl_ord_id']) > 20)) {
            $invalidProperties[] = "invalid value for 'cl_ord_id', the character length must be smaller than or equal to 20.";
        }

        if (!is_null($this->container['symbol']) && !preg_match("/^[A-Z]{3,5}-[A-Z]{3,5}$/", $this->container['symbol'])) {
            $invalidProperties[] = "invalid value for 'symbol', must be conform to the pattern /^[A-Z]{3,5}-[A-Z]{3,5}$/.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets ex_ord_id
     *
     * @return int|null
     */
    public function getExOrdId()
    {
        return $this->container['ex_ord_id'];
    }

    /**
     * Sets ex_ord_id
     *
     * @param int|null $ex_ord_id The unique order id assigned by the exchange
     *
     * @return $this
     */
    public function setExOrdId($ex_ord_id)
    {
        $this->container['ex_ord_id'] = $ex_ord_id;

        return $this;
    }

    /**
     * Gets cl_ord_id
     *
     * @return string|null
     */
    public function getClOrdId()
    {
        return $this->container['cl_ord_id'];
    }

    /**
     * Sets cl_ord_id
     *
     * @param string|null $cl_ord_id Reference field provided by client and cannot exceed 20 characters
     *
     * @return $this
     */
    public function setClOrdId($cl_ord_id)
    {
        if (!is_null($cl_ord_id) && (mb_strlen($cl_ord_id) > 20)) {
            throw new \InvalidArgumentException('invalid length for $cl_ord_id when calling OrderSummary., must be smaller than or equal to 20.');
        }

        $this->container['cl_ord_id'] = $cl_ord_id;

        return $this;
    }

    /**
     * Gets ord_status
     *
     * @return \com.blockchain.exchange.rest\com.blockchain.exchange.rest.model\OrderStatus|null
     */
    public function getOrdStatus()
    {
        return $this->container['ord_status'];
    }

    /**
     * Sets ord_status
     *
     * @param \com.blockchain.exchange.rest\com.blockchain.exchange.rest.model\OrderStatus|null $ord_status ord_status
     *
     * @return $this
     */
    public function setOrdStatus($ord_status)
    {
        $this->container['ord_status'] = $ord_status;

        return $this;
    }

    /**
     * Gets side
     *
     * @return \com.blockchain.exchange.rest\com.blockchain.exchange.rest.model\Side|null
     */
    public function getSide()
    {
        return $this->container['side'];
    }

    /**
     * Sets side
     *
     * @param \com.blockchain.exchange.rest\com.blockchain.exchange.rest.model\Side|null $side side
     *
     * @return $this
     */
    public function setSide($side)
    {
        $this->container['side'] = $side;

        return $this;
    }

    /**
     * Gets text
     *
     * @return string|null
     */
    public function getText()
    {
        return $this->container['text'];
    }

    /**
     * Sets text
     *
     * @param string|null $text The reason for rejecting the order, if applicable
     *
     * @return $this
     */
    public function setText($text)
    {
        $this->container['text'] = $text;

        return $this;
    }

    /**
     * Gets symbol
     *
     * @return string|null
     */
    public function getSymbol()
    {
        return $this->container['symbol'];
    }

    /**
     * Sets symbol
     *
     * @param string|null $symbol Blockchain symbol identifier
     *
     * @return $this
     */
    public function setSymbol($symbol)
    {

        if (!is_null($symbol) && (!preg_match("/^[A-Z]{3,5}-[A-Z]{3,5}$/", $symbol))) {
            throw new \InvalidArgumentException("invalid value for $symbol when calling OrderSummary., must conform to the pattern /^[A-Z]{3,5}-[A-Z]{3,5}$/.");
        }

        $this->container['symbol'] = $symbol;

        return $this;
    }

    /**
     * Gets last_shares
     *
     * @return double|null
     */
    public function getLastShares()
    {
        return $this->container['last_shares'];
    }

    /**
     * Sets last_shares
     *
     * @param double|null $last_shares The executed quantity for the order's last fill
     *
     * @return $this
     */
    public function setLastShares($last_shares)
    {
        $this->container['last_shares'] = $last_shares;

        return $this;
    }

    /**
     * Gets last_px
     *
     * @return double|null
     */
    public function getLastPx()
    {
        return $this->container['last_px'];
    }

    /**
     * Sets last_px
     *
     * @param double|null $last_px The executed price for the last fill
     *
     * @return $this
     */
    public function setLastPx($last_px)
    {
        $this->container['last_px'] = $last_px;

        return $this;
    }

    /**
     * Gets leaves_qty
     *
     * @return double|null
     */
    public function getLeavesQty()
    {
        return $this->container['leaves_qty'];
    }

    /**
     * Sets leaves_qty
     *
     * @param double|null $leaves_qty For Open and Partially Filled orders this is the remaining quantity open for execution. For Canceled and Expired orders this is the quantity than was still open before cancellation/expiration. For Rejected order this is equal to orderQty. For other states this is always zero.
     *
     * @return $this
     */
    public function setLeavesQty($leaves_qty)
    {
        $this->container['leaves_qty'] = $leaves_qty;

        return $this;
    }

    /**
     * Gets cum_qty
     *
     * @return double|null
     */
    public function getCumQty()
    {
        return $this->container['cum_qty'];
    }

    /**
     * Sets cum_qty
     *
     * @param double|null $cum_qty The quantity of the order which has been filled
     *
     * @return $this
     */
    public function setCumQty($cum_qty)
    {
        $this->container['cum_qty'] = $cum_qty;

        return $this;
    }

    /**
     * Gets avg_px
     *
     * @return double|null
     */
    public function getAvgPx()
    {
        return $this->container['avg_px'];
    }

    /**
     * Sets avg_px
     *
     * @param double|null $avg_px Calculated the Volume Weighted Average Price of all fills for this order
     *
     * @return $this
     */
    public function setAvgPx($avg_px)
    {
        $this->container['avg_px'] = $avg_px;

        return $this;
    }

    /**
     * Gets timestamp
     *
     * @return int|null
     */
    public function getTimestamp()
    {
        return $this->container['timestamp'];
    }

    /**
     * Sets timestamp
     *
     * @param int|null $timestamp Time in ms since 01/01/1970 (epoch)
     *
     * @return $this
     */
    public function setTimestamp($timestamp)
    {
        $this->container['timestamp'] = $timestamp;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


