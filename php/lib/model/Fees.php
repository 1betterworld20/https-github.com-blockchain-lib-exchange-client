<?php
/**
 * Fees
 *
 * PHP version 5
 *
 * @category Class
 * @package  com.blockchain.exchange.rest
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Blockchain.com Exchange REST API
 *
 * ## Introduction Welcome to Blockchain.com's Exchange API and developer documentation. \\ These documents detail and give examples of various functionality offered by the API such as receiving real time market data, requesting balance information and performing trades. ## To Get Started Create or log into your existing Blockchain.com Exchange account \\ Select API from the drop down menu \\ Fill out form and click “Create New API Key Now” \\ Once generated you can view your keys under API Settings. \\ Please be aware that the API key can only be used once it was verified via email.  The API key must be set via the \\ `X-API-Token`\\ header.  The base URL to be used for all calls is \\ `https://api.blockchain.com/v3/exchange`  Autogenerated clients for this API can be found [here](https://github.com/blockchain/lib-exchange-client).
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.3.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace com.blockchain.exchange.rest\com.blockchain.exchange.rest.model;

use \ArrayAccess;
use \com.blockchain.exchange.rest\ObjectSerializer;

/**
 * Fees Class Doc Comment
 *
 * @category Class
 * @package  com.blockchain.exchange.rest
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class Fees implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Fees';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'maker_rate' => 'double',
        'taker_rate' => 'double',
        'volume_in_usd' => 'double'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'maker_rate' => 'double',
        'taker_rate' => 'double',
        'volume_in_usd' => 'double'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'maker_rate' => 'makerRate',
        'taker_rate' => 'takerRate',
        'volume_in_usd' => 'volumeInUSD'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'maker_rate' => 'setMakerRate',
        'taker_rate' => 'setTakerRate',
        'volume_in_usd' => 'setVolumeInUsd'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'maker_rate' => 'getMakerRate',
        'taker_rate' => 'getTakerRate',
        'volume_in_usd' => 'getVolumeInUsd'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['maker_rate'] = isset($data['maker_rate']) ? $data['maker_rate'] : null;
        $this->container['taker_rate'] = isset($data['taker_rate']) ? $data['taker_rate'] : null;
        $this->container['volume_in_usd'] = isset($data['volume_in_usd']) ? $data['volume_in_usd'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['maker_rate'] === null) {
            $invalidProperties[] = "'maker_rate' can't be null";
        }
        if ($this->container['taker_rate'] === null) {
            $invalidProperties[] = "'taker_rate' can't be null";
        }
        if ($this->container['volume_in_usd'] === null) {
            $invalidProperties[] = "'volume_in_usd' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets maker_rate
     *
     * @return double
     */
    public function getMakerRate()
    {
        return $this->container['maker_rate'];
    }

    /**
     * Sets maker_rate
     *
     * @param double $maker_rate maker_rate
     *
     * @return $this
     */
    public function setMakerRate($maker_rate)
    {
        $this->container['maker_rate'] = $maker_rate;

        return $this;
    }

    /**
     * Gets taker_rate
     *
     * @return double
     */
    public function getTakerRate()
    {
        return $this->container['taker_rate'];
    }

    /**
     * Sets taker_rate
     *
     * @param double $taker_rate taker_rate
     *
     * @return $this
     */
    public function setTakerRate($taker_rate)
    {
        $this->container['taker_rate'] = $taker_rate;

        return $this;
    }

    /**
     * Gets volume_in_usd
     *
     * @return double
     */
    public function getVolumeInUsd()
    {
        return $this->container['volume_in_usd'];
    }

    /**
     * Sets volume_in_usd
     *
     * @param double $volume_in_usd volume_in_usd
     *
     * @return $this
     */
    public function setVolumeInUsd($volume_in_usd)
    {
        $this->container['volume_in_usd'] = $volume_in_usd;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


