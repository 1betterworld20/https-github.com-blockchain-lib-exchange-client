/**
 * Blockchain.com Exchange REST API
 * ## Introduction Welcome to Blockchain.com's Exchange API and developer documentation. These documents detail and give examples of various functionality offered by the API such as receiving real time market data, requesting balance information and performing trades. ## To Get Started Create or log into your existing Blockchain.com Exchange account Select API from the drop down menu Fill out form and click “Create New API Key Now” Once generated you can view your keys under API Settings 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.blockchain.exchange.rest.model;

import io.swagger.annotations.*;
import com.google.gson.annotations.SerializedName;

@ApiModel(description = "")
public class SymbolStatus {
  
  @SerializedName("base_currency")
  private String baseCurrency = null;
  @SerializedName("base_currency_scale")
  private Integer baseCurrencyScale = null;
  @SerializedName("counter_currency")
  private String counterCurrency = null;
  @SerializedName("counter_currency_scale")
  private Integer counterCurrencyScale = null;
  @SerializedName("min_price_increment")
  private Long minPriceIncrement = null;
  @SerializedName("min_price_increment_scale")
  private Integer minPriceIncrementScale = null;
  @SerializedName("min_order_size")
  private Long minOrderSize = null;
  @SerializedName("min_order_size_scale")
  private Integer minOrderSizeScale = null;
  @SerializedName("max_order_size")
  private Long maxOrderSize = null;
  @SerializedName("max_order_size_scale")
  private Integer maxOrderSizeScale = null;
  @SerializedName("lot_size")
  private Long lotSize = null;
  @SerializedName("lot_size_scale")
  private Integer lotSizeScale = null;
  public enum StatusEnum {
     open,  close,  suspend,  halt,  halt-freeze, 
  };
  @SerializedName("status")
  private StatusEnum status = null;
  @SerializedName("id")
  private Long id = null;
  @SerializedName("auction_price")
  private Double auctionPrice = null;
  @SerializedName("auction_size")
  private Double auctionSize = null;
  @SerializedName("auction_time")
  private Integer auctionTime = null;
  @SerializedName("imbalance")
  private Double imbalance = null;

  /**
   * Blockchain symbol identifier
   **/
  @ApiModelProperty(value = "Blockchain symbol identifier")
  public String getBaseCurrency() {
    return baseCurrency;
  }
  public void setBaseCurrency(String baseCurrency) {
    this.baseCurrency = baseCurrency;
  }

  /**
   * The number of decimals the currency can be split in
   **/
  @ApiModelProperty(value = "The number of decimals the currency can be split in")
  public Integer getBaseCurrencyScale() {
    return baseCurrencyScale;
  }
  public void setBaseCurrencyScale(Integer baseCurrencyScale) {
    this.baseCurrencyScale = baseCurrencyScale;
  }

  /**
   * Blockchain symbol identifier
   **/
  @ApiModelProperty(value = "Blockchain symbol identifier")
  public String getCounterCurrency() {
    return counterCurrency;
  }
  public void setCounterCurrency(String counterCurrency) {
    this.counterCurrency = counterCurrency;
  }

  /**
   * The number of decimals the currency can be split in
   **/
  @ApiModelProperty(value = "The number of decimals the currency can be split in")
  public Integer getCounterCurrencyScale() {
    return counterCurrencyScale;
  }
  public void setCounterCurrencyScale(Integer counterCurrencyScale) {
    this.counterCurrencyScale = counterCurrencyScale;
  }

  /**
   * The price of the instrument must be a multiple of min_price_increment * (10^-min_price_increment_scale)
   **/
  @ApiModelProperty(value = "The price of the instrument must be a multiple of min_price_increment * (10^-min_price_increment_scale)")
  public Long getMinPriceIncrement() {
    return minPriceIncrement;
  }
  public void setMinPriceIncrement(Long minPriceIncrement) {
    this.minPriceIncrement = minPriceIncrement;
  }

  /**
   **/
  @ApiModelProperty(value = "")
  public Integer getMinPriceIncrementScale() {
    return minPriceIncrementScale;
  }
  public void setMinPriceIncrementScale(Integer minPriceIncrementScale) {
    this.minPriceIncrementScale = minPriceIncrementScale;
  }

  /**
   * The minimum quantity for an order for this instrument must be min_order_size*(10^-min_order_size_scale)
   **/
  @ApiModelProperty(value = "The minimum quantity for an order for this instrument must be min_order_size*(10^-min_order_size_scale)")
  public Long getMinOrderSize() {
    return minOrderSize;
  }
  public void setMinOrderSize(Long minOrderSize) {
    this.minOrderSize = minOrderSize;
  }

  /**
   **/
  @ApiModelProperty(value = "")
  public Integer getMinOrderSizeScale() {
    return minOrderSizeScale;
  }
  public void setMinOrderSizeScale(Integer minOrderSizeScale) {
    this.minOrderSizeScale = minOrderSizeScale;
  }

  /**
   * The maximum quantity for an order for this instrument is max_order_size*(10^-max_order_size_scale). If this equal to zero, there is no limit
   **/
  @ApiModelProperty(value = "The maximum quantity for an order for this instrument is max_order_size*(10^-max_order_size_scale). If this equal to zero, there is no limit")
  public Long getMaxOrderSize() {
    return maxOrderSize;
  }
  public void setMaxOrderSize(Long maxOrderSize) {
    this.maxOrderSize = maxOrderSize;
  }

  /**
   **/
  @ApiModelProperty(value = "")
  public Integer getMaxOrderSizeScale() {
    return maxOrderSizeScale;
  }
  public void setMaxOrderSizeScale(Integer maxOrderSizeScale) {
    this.maxOrderSizeScale = maxOrderSizeScale;
  }

  /**
   **/
  @ApiModelProperty(value = "")
  public Long getLotSize() {
    return lotSize;
  }
  public void setLotSize(Long lotSize) {
    this.lotSize = lotSize;
  }

  /**
   **/
  @ApiModelProperty(value = "")
  public Integer getLotSizeScale() {
    return lotSizeScale;
  }
  public void setLotSizeScale(Integer lotSizeScale) {
    this.lotSizeScale = lotSizeScale;
  }

  /**
   * Symbol status; open, close, suspend, halt, halt-freeze.
   **/
  @ApiModelProperty(value = "Symbol status; open, close, suspend, halt, halt-freeze.")
  public StatusEnum getStatus() {
    return status;
  }
  public void setStatus(StatusEnum status) {
    this.status = status;
  }

  /**
   **/
  @ApiModelProperty(value = "")
  public Long getId() {
    return id;
  }
  public void setId(Long id) {
    this.id = id;
  }

  /**
   * If the symbol is halted and will open on an auction, this will be the opening price.
   **/
  @ApiModelProperty(value = "If the symbol is halted and will open on an auction, this will be the opening price.")
  public Double getAuctionPrice() {
    return auctionPrice;
  }
  public void setAuctionPrice(Double auctionPrice) {
    this.auctionPrice = auctionPrice;
  }

  /**
   * Opening size
   **/
  @ApiModelProperty(value = "Opening size")
  public Double getAuctionSize() {
    return auctionSize;
  }
  public void setAuctionSize(Double auctionSize) {
    this.auctionSize = auctionSize;
  }

  /**
   * Opening time in HHMM format
   **/
  @ApiModelProperty(value = "Opening time in HHMM format")
  public Integer getAuctionTime() {
    return auctionTime;
  }
  public void setAuctionTime(Integer auctionTime) {
    this.auctionTime = auctionTime;
  }

  /**
   * Auction imbalance. If > 0 then there will be buy orders left over at the auction price. If < 0 then there will be sell orders left over at the auction price.
   **/
  @ApiModelProperty(value = "Auction imbalance. If > 0 then there will be buy orders left over at the auction price. If < 0 then there will be sell orders left over at the auction price.")
  public Double getImbalance() {
    return imbalance;
  }
  public void setImbalance(Double imbalance) {
    this.imbalance = imbalance;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SymbolStatus symbolStatus = (SymbolStatus) o;
    return (this.baseCurrency == null ? symbolStatus.baseCurrency == null : this.baseCurrency.equals(symbolStatus.baseCurrency)) &&
        (this.baseCurrencyScale == null ? symbolStatus.baseCurrencyScale == null : this.baseCurrencyScale.equals(symbolStatus.baseCurrencyScale)) &&
        (this.counterCurrency == null ? symbolStatus.counterCurrency == null : this.counterCurrency.equals(symbolStatus.counterCurrency)) &&
        (this.counterCurrencyScale == null ? symbolStatus.counterCurrencyScale == null : this.counterCurrencyScale.equals(symbolStatus.counterCurrencyScale)) &&
        (this.minPriceIncrement == null ? symbolStatus.minPriceIncrement == null : this.minPriceIncrement.equals(symbolStatus.minPriceIncrement)) &&
        (this.minPriceIncrementScale == null ? symbolStatus.minPriceIncrementScale == null : this.minPriceIncrementScale.equals(symbolStatus.minPriceIncrementScale)) &&
        (this.minOrderSize == null ? symbolStatus.minOrderSize == null : this.minOrderSize.equals(symbolStatus.minOrderSize)) &&
        (this.minOrderSizeScale == null ? symbolStatus.minOrderSizeScale == null : this.minOrderSizeScale.equals(symbolStatus.minOrderSizeScale)) &&
        (this.maxOrderSize == null ? symbolStatus.maxOrderSize == null : this.maxOrderSize.equals(symbolStatus.maxOrderSize)) &&
        (this.maxOrderSizeScale == null ? symbolStatus.maxOrderSizeScale == null : this.maxOrderSizeScale.equals(symbolStatus.maxOrderSizeScale)) &&
        (this.lotSize == null ? symbolStatus.lotSize == null : this.lotSize.equals(symbolStatus.lotSize)) &&
        (this.lotSizeScale == null ? symbolStatus.lotSizeScale == null : this.lotSizeScale.equals(symbolStatus.lotSizeScale)) &&
        (this.status == null ? symbolStatus.status == null : this.status.equals(symbolStatus.status)) &&
        (this.id == null ? symbolStatus.id == null : this.id.equals(symbolStatus.id)) &&
        (this.auctionPrice == null ? symbolStatus.auctionPrice == null : this.auctionPrice.equals(symbolStatus.auctionPrice)) &&
        (this.auctionSize == null ? symbolStatus.auctionSize == null : this.auctionSize.equals(symbolStatus.auctionSize)) &&
        (this.auctionTime == null ? symbolStatus.auctionTime == null : this.auctionTime.equals(symbolStatus.auctionTime)) &&
        (this.imbalance == null ? symbolStatus.imbalance == null : this.imbalance.equals(symbolStatus.imbalance));
  }

  @Override
  public int hashCode() {
    int result = 17;
    result = 31 * result + (this.baseCurrency == null ? 0: this.baseCurrency.hashCode());
    result = 31 * result + (this.baseCurrencyScale == null ? 0: this.baseCurrencyScale.hashCode());
    result = 31 * result + (this.counterCurrency == null ? 0: this.counterCurrency.hashCode());
    result = 31 * result + (this.counterCurrencyScale == null ? 0: this.counterCurrencyScale.hashCode());
    result = 31 * result + (this.minPriceIncrement == null ? 0: this.minPriceIncrement.hashCode());
    result = 31 * result + (this.minPriceIncrementScale == null ? 0: this.minPriceIncrementScale.hashCode());
    result = 31 * result + (this.minOrderSize == null ? 0: this.minOrderSize.hashCode());
    result = 31 * result + (this.minOrderSizeScale == null ? 0: this.minOrderSizeScale.hashCode());
    result = 31 * result + (this.maxOrderSize == null ? 0: this.maxOrderSize.hashCode());
    result = 31 * result + (this.maxOrderSizeScale == null ? 0: this.maxOrderSizeScale.hashCode());
    result = 31 * result + (this.lotSize == null ? 0: this.lotSize.hashCode());
    result = 31 * result + (this.lotSizeScale == null ? 0: this.lotSizeScale.hashCode());
    result = 31 * result + (this.status == null ? 0: this.status.hashCode());
    result = 31 * result + (this.id == null ? 0: this.id.hashCode());
    result = 31 * result + (this.auctionPrice == null ? 0: this.auctionPrice.hashCode());
    result = 31 * result + (this.auctionSize == null ? 0: this.auctionSize.hashCode());
    result = 31 * result + (this.auctionTime == null ? 0: this.auctionTime.hashCode());
    result = 31 * result + (this.imbalance == null ? 0: this.imbalance.hashCode());
    return result;
  }

  @Override
  public String toString()  {
    StringBuilder sb = new StringBuilder();
    sb.append("class SymbolStatus {\n");
    
    sb.append("  baseCurrency: ").append(baseCurrency).append("\n");
    sb.append("  baseCurrencyScale: ").append(baseCurrencyScale).append("\n");
    sb.append("  counterCurrency: ").append(counterCurrency).append("\n");
    sb.append("  counterCurrencyScale: ").append(counterCurrencyScale).append("\n");
    sb.append("  minPriceIncrement: ").append(minPriceIncrement).append("\n");
    sb.append("  minPriceIncrementScale: ").append(minPriceIncrementScale).append("\n");
    sb.append("  minOrderSize: ").append(minOrderSize).append("\n");
    sb.append("  minOrderSizeScale: ").append(minOrderSizeScale).append("\n");
    sb.append("  maxOrderSize: ").append(maxOrderSize).append("\n");
    sb.append("  maxOrderSizeScale: ").append(maxOrderSizeScale).append("\n");
    sb.append("  lotSize: ").append(lotSize).append("\n");
    sb.append("  lotSizeScale: ").append(lotSizeScale).append("\n");
    sb.append("  status: ").append(status).append("\n");
    sb.append("  id: ").append(id).append("\n");
    sb.append("  auctionPrice: ").append(auctionPrice).append("\n");
    sb.append("  auctionSize: ").append(auctionSize).append("\n");
    sb.append("  auctionTime: ").append(auctionTime).append("\n");
    sb.append("  imbalance: ").append(imbalance).append("\n");
    sb.append("}\n");
    return sb.toString();
  }
}
