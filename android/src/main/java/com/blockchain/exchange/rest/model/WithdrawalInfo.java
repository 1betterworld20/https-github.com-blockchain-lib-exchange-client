/**
 * Blockchain.com Exchange REST API
 * ## Introduction Welcome to Blockchain.com's Exchange API and developer documentation. \\ These documents detail and give examples of various functionality offered by the API such as receiving real time market data, requesting balance information and performing trades. ## To Get Started Create or log into your existing Blockchain.com Exchange account \\ Select API from the drop down menu \\ Fill out form and click “Create New API Key Now” \\ Once generated you can view your keys under API Settings. \\ Please be aware that the API key can only be used once it was verified via email.  The API key must be set via the \\ `X-API-Token`\\ header.  The base URL to be used for all calls is \\ `https://api.blockchain.com/v3/exchange`  Autogenerated clients for this API can be found [here](https://github.com/blockchain/lib-exchange-client). 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.blockchain.exchange.rest.model;

import com.blockchain.exchange.rest.model.WithdrawalStatus;
import io.swagger.annotations.*;
import com.google.gson.annotations.SerializedName;

@ApiModel(description = "")
public class WithdrawalInfo {
  
  @SerializedName("withdrawalId")
  private String withdrawalId = null;
  @SerializedName("amount")
  private Double amount = null;
  @SerializedName("fee")
  private Double fee = null;
  @SerializedName("currency")
  private String currency = null;
  @SerializedName("beneficiary")
  private String beneficiary = null;
  @SerializedName("state")
  private WithdrawalStatus state = null;
  @SerializedName("timestamp")
  private Long timestamp = null;

  /**
   * Unique ID for this withdrawal
   **/
  @ApiModelProperty(value = "Unique ID for this withdrawal")
  public String getWithdrawalId() {
    return withdrawalId;
  }
  public void setWithdrawalId(String withdrawalId) {
    this.withdrawalId = withdrawalId;
  }

  /**
   * The amount to withdraw in the currency specified
   **/
  @ApiModelProperty(required = true, value = "The amount to withdraw in the currency specified")
  public Double getAmount() {
    return amount;
  }
  public void setAmount(Double amount) {
    this.amount = amount;
  }

  /**
   * The amount charged in fees for this withdrawal
   **/
  @ApiModelProperty(value = "The amount charged in fees for this withdrawal")
  public Double getFee() {
    return fee;
  }
  public void setFee(Double fee) {
    this.fee = fee;
  }

  /**
   **/
  @ApiModelProperty(required = true, value = "")
  public String getCurrency() {
    return currency;
  }
  public void setCurrency(String currency) {
    this.currency = currency;
  }

  /**
   **/
  @ApiModelProperty(required = true, value = "")
  public String getBeneficiary() {
    return beneficiary;
  }
  public void setBeneficiary(String beneficiary) {
    this.beneficiary = beneficiary;
  }

  /**
   **/
  @ApiModelProperty(value = "")
  public WithdrawalStatus getState() {
    return state;
  }
  public void setState(WithdrawalStatus state) {
    this.state = state;
  }

  /**
   * Time in ms since 01/01/1970 (epoch)
   **/
  @ApiModelProperty(value = "Time in ms since 01/01/1970 (epoch)")
  public Long getTimestamp() {
    return timestamp;
  }
  public void setTimestamp(Long timestamp) {
    this.timestamp = timestamp;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    WithdrawalInfo withdrawalInfo = (WithdrawalInfo) o;
    return (this.withdrawalId == null ? withdrawalInfo.withdrawalId == null : this.withdrawalId.equals(withdrawalInfo.withdrawalId)) &&
        (this.amount == null ? withdrawalInfo.amount == null : this.amount.equals(withdrawalInfo.amount)) &&
        (this.fee == null ? withdrawalInfo.fee == null : this.fee.equals(withdrawalInfo.fee)) &&
        (this.currency == null ? withdrawalInfo.currency == null : this.currency.equals(withdrawalInfo.currency)) &&
        (this.beneficiary == null ? withdrawalInfo.beneficiary == null : this.beneficiary.equals(withdrawalInfo.beneficiary)) &&
        (this.state == null ? withdrawalInfo.state == null : this.state.equals(withdrawalInfo.state)) &&
        (this.timestamp == null ? withdrawalInfo.timestamp == null : this.timestamp.equals(withdrawalInfo.timestamp));
  }

  @Override
  public int hashCode() {
    int result = 17;
    result = 31 * result + (this.withdrawalId == null ? 0: this.withdrawalId.hashCode());
    result = 31 * result + (this.amount == null ? 0: this.amount.hashCode());
    result = 31 * result + (this.fee == null ? 0: this.fee.hashCode());
    result = 31 * result + (this.currency == null ? 0: this.currency.hashCode());
    result = 31 * result + (this.beneficiary == null ? 0: this.beneficiary.hashCode());
    result = 31 * result + (this.state == null ? 0: this.state.hashCode());
    result = 31 * result + (this.timestamp == null ? 0: this.timestamp.hashCode());
    return result;
  }

  @Override
  public String toString()  {
    StringBuilder sb = new StringBuilder();
    sb.append("class WithdrawalInfo {\n");
    
    sb.append("  withdrawalId: ").append(withdrawalId).append("\n");
    sb.append("  amount: ").append(amount).append("\n");
    sb.append("  fee: ").append(fee).append("\n");
    sb.append("  currency: ").append(currency).append("\n");
    sb.append("  beneficiary: ").append(beneficiary).append("\n");
    sb.append("  state: ").append(state).append("\n");
    sb.append("  timestamp: ").append(timestamp).append("\n");
    sb.append("}\n");
    return sb.toString();
  }
}
