{-
   Blockchain.com Exchange REST API
   ## Introduction Welcome to Blockchain.com's Exchange API and developer documentation. \\ These documents detail and give examples of various functionality offered by the API such as receiving real time market data, requesting balance information and performing trades. ## To Get Started Create or log into your existing Blockchain.com Exchange account \\ Select API from the drop down menu \\ Fill out form and click “Create New API Key Now” \\ Once generated you can view your keys under API Settings. \\ Please be aware that the API key can only be used once it was verified via email.  The API key must be set via the \\ `X-API-Token`\\ header.  The base URL to be used for all calls is \\ `https://api.blockchain.com/v3/exchange`  Autogenerated clients for this API can be found [here](https://github.com/blockchain/lib-exchange-client). 

   The version of the OpenAPI document: 1.0.0

   NOTE: This file is auto generated by the openapi-generator.
   https://github.com/openapitools/openapi-generator.git
   Do not edit this file manually.
-}


module Data.WithdrawalInfo exposing (WithdrawalInfo, decoder, encode, encodeWithTag, toString)

import Data.WithdrawalStatus as WithdrawalStatus exposing (WithdrawalStatus)
import Dict exposing (Dict)
import Json.Decode as Decode exposing (Decoder)
import Json.Decode.Pipeline exposing (optional, required)
import Json.Encode as Encode


type alias WithdrawalInfo =
    { withdrawalId : Maybe (String)
    , amount : Float
    , fee : Maybe (Float)
    , currency : String
    , beneficiary : String
    , state : Maybe (WithdrawalStatus)
    , timestamp : Maybe (Int)
    }


decoder : Decoder WithdrawalInfo
decoder =
    Decode.succeed WithdrawalInfo
        |> optional "withdrawalId" (Decode.nullable Decode.string) Nothing
        |> required "amount" Decode.float
        |> optional "fee" (Decode.nullable Decode.float) Nothing
        |> required "currency" Decode.string
        |> required "beneficiary" Decode.string
        |> optional "state" (Decode.nullable WithdrawalStatus.decoder) Nothing
        |> optional "timestamp" (Decode.nullable Decode.int) Nothing



encode : WithdrawalInfo -> Encode.Value
encode =
    Encode.object << encodePairs


encodeWithTag : ( String, String ) -> WithdrawalInfo -> Encode.Value
encodeWithTag (tagField, tag) model =
    Encode.object <| encodePairs model ++ [ ( tagField, Encode.string tag ) ]


encodePairs : WithdrawalInfo -> List (String, Encode.Value)
encodePairs model =
    [ ( "withdrawalId", Maybe.withDefault Encode.null (Maybe.map Encode.string model.withdrawalId) )
    , ( "amount", Encode.float model.amount )
    , ( "fee", Maybe.withDefault Encode.null (Maybe.map Encode.float model.fee) )
    , ( "currency", Encode.string model.currency )
    , ( "beneficiary", Encode.string model.beneficiary )
    , ( "state", Maybe.withDefault Encode.null (Maybe.map WithdrawalStatus.encode model.state) )
    , ( "timestamp", Maybe.withDefault Encode.null (Maybe.map Encode.int model.timestamp) )
    ]



toString : WithdrawalInfo -> String
toString =
    Encode.encode 0 << encode




