{-
   Blockchain.com Exchange REST API
   ## Introduction Welcome to Blockchain.com's Exchange API and developer documentation. These documents detail and give examples of various functionality offered by the API such as receiving real time market data, requesting balance information and performing trades. ## To Get Started Create or log into your existing Blockchain.com Exchange account Select API from the drop down menu Fill out form and click “Create New API Key Now” Once generated you can view your keys under API Settings 

   The version of the OpenAPI document: 1.0.0

   NOTE: This file is auto generated by the openapi-generator.
   https://github.com/openapitools/openapi-generator.git
   Do not edit this file manually.
-}


module Data.DepositInfo exposing (DepositInfo, State(..), decoder, encode, encodeWithTag, toString)

import Dict exposing (Dict)
import Json.Decode as Decode exposing (Decoder)
import Json.Decode.Pipeline exposing (optional, required)
import Json.Encode as Encode


type alias DepositInfo =
    { depositId : String
    , amount : Float
    , currency : String
    , address : String
    , txHash : Maybe (String)
    , state : State
    , timestamp : Maybe (Int)
    }


type State
    = REJECTED
    | UNCONFIRMED
    | COMPLETED



decoder : Decoder DepositInfo
decoder =
    Decode.succeed DepositInfo
        |> required "depositId" Decode.string
        |> required "amount" Decode.float
        |> required "currency" Decode.string
        |> required "address" Decode.string
        |> optional "txHash" (Decode.nullable Decode.string) Nothing
        |> required "state" stateDecoder
        |> optional "timestamp" (Decode.nullable Decode.int) Nothing



encode : DepositInfo -> Encode.Value
encode =
    Encode.object << encodePairs


encodeWithTag : ( String, String ) -> DepositInfo -> Encode.Value
encodeWithTag (tagField, tag) model =
    Encode.object <| encodePairs model ++ [ ( tagField, Encode.string tag ) ]


encodePairs : DepositInfo -> List (String, Encode.Value)
encodePairs model =
    [ ( "depositId", Encode.string model.depositId )
    , ( "amount", Encode.float model.amount )
    , ( "currency", Encode.string model.currency )
    , ( "address", Encode.string model.address )
    , ( "txHash", Maybe.withDefault Encode.null (Maybe.map Encode.string model.txHash) )
    , ( "state", encodeState model.state )
    , ( "timestamp", Maybe.withDefault Encode.null (Maybe.map Encode.int model.timestamp) )
    ]



toString : DepositInfo -> String
toString =
    Encode.encode 0 << encode




stateDecoder : Decoder State
stateDecoder =
    Decode.string
        |> Decode.andThen
            (\str ->
                case str of
                    "REJECTED" ->
                        Decode.succeed REJECTED

                    "UNCONFIRMED" ->
                        Decode.succeed UNCONFIRMED

                    "COMPLETED" ->
                        Decode.succeed COMPLETED

                    other ->
                        Decode.fail <| "Unknown type: " ++ other
            )



encodeState : State -> Encode.Value
encodeState model =
    case model of
        REJECTED ->
            Encode.string "REJECTED"

        UNCONFIRMED ->
            Encode.string "UNCONFIRMED"

        COMPLETED ->
            Encode.string "COMPLETED"




