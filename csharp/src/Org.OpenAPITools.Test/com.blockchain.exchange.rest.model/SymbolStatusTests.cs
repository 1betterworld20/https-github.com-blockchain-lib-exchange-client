/* 
 * Blockchain.com Exchange REST API
 *
 * ## Introduction Welcome to Blockchain.com's Exchange API and developer documentation. \\ These documents detail and give examples of various functionality offered by the API such as receiving real time market data, requesting balance information and performing trades. ## To Get Started Create or log into your existing Blockchain.com Exchange account \\ Select API from the drop down menu \\ Fill out form and click “Create New API Key Now” \\ Once generated you can view your keys under API Settings. \\ Please be aware that the API key can only be used once it was verified via email.  The API key must be set via the \\ `X-API-Token`\\ header.  The base URL to be used for all calls is \\ `https://api.blockchain.com/v3/exchange`  Autogenerated clients for this API can be found [here](https://github.com/blockchain/lib-exchange-client). 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using NUnit.Framework;

using System;
using System.Linq;
using System.IO;
using System.Collections.Generic;
using Org.OpenAPITools.com.blockchain.exchange.rest.api;
using Org.OpenAPITools.com.blockchain.exchange.rest.model;
using Org.OpenAPITools.Client;
using System.Reflection;
using Newtonsoft.Json;

namespace Org.OpenAPITools.Test
{
    /// <summary>
    ///  Class for testing SymbolStatus
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the model.
    /// </remarks>
    public class SymbolStatusTests
    {
        // TODO uncomment below to declare an instance variable for SymbolStatus
        //private SymbolStatus instance;

        /// <summary>
        /// Setup before each test
        /// </summary>
        [SetUp]
        public void Init()
        {
            // TODO uncomment below to create an instance of SymbolStatus
            //instance = new SymbolStatus();
        }

        /// <summary>
        /// Clean up after each test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of SymbolStatus
        /// </summary>
        [Test]
        public void SymbolStatusInstanceTest()
        {
            // TODO uncomment below to test "IsInstanceOf" SymbolStatus
            //Assert.IsInstanceOf(typeof(SymbolStatus), instance);
        }


        /// <summary>
        /// Test the property 'BaseCurrency'
        /// </summary>
        [Test]
        public void BaseCurrencyTest()
        {
            // TODO unit test for the property 'BaseCurrency'
        }
        /// <summary>
        /// Test the property 'BaseCurrencyScale'
        /// </summary>
        [Test]
        public void BaseCurrencyScaleTest()
        {
            // TODO unit test for the property 'BaseCurrencyScale'
        }
        /// <summary>
        /// Test the property 'CounterCurrency'
        /// </summary>
        [Test]
        public void CounterCurrencyTest()
        {
            // TODO unit test for the property 'CounterCurrency'
        }
        /// <summary>
        /// Test the property 'CounterCurrencyScale'
        /// </summary>
        [Test]
        public void CounterCurrencyScaleTest()
        {
            // TODO unit test for the property 'CounterCurrencyScale'
        }
        /// <summary>
        /// Test the property 'MinPriceIncrement'
        /// </summary>
        [Test]
        public void MinPriceIncrementTest()
        {
            // TODO unit test for the property 'MinPriceIncrement'
        }
        /// <summary>
        /// Test the property 'MinPriceIncrementScale'
        /// </summary>
        [Test]
        public void MinPriceIncrementScaleTest()
        {
            // TODO unit test for the property 'MinPriceIncrementScale'
        }
        /// <summary>
        /// Test the property 'MinOrderSize'
        /// </summary>
        [Test]
        public void MinOrderSizeTest()
        {
            // TODO unit test for the property 'MinOrderSize'
        }
        /// <summary>
        /// Test the property 'MinOrderSizeScale'
        /// </summary>
        [Test]
        public void MinOrderSizeScaleTest()
        {
            // TODO unit test for the property 'MinOrderSizeScale'
        }
        /// <summary>
        /// Test the property 'MaxOrderSize'
        /// </summary>
        [Test]
        public void MaxOrderSizeTest()
        {
            // TODO unit test for the property 'MaxOrderSize'
        }
        /// <summary>
        /// Test the property 'MaxOrderSizeScale'
        /// </summary>
        [Test]
        public void MaxOrderSizeScaleTest()
        {
            // TODO unit test for the property 'MaxOrderSizeScale'
        }
        /// <summary>
        /// Test the property 'LotSize'
        /// </summary>
        [Test]
        public void LotSizeTest()
        {
            // TODO unit test for the property 'LotSize'
        }
        /// <summary>
        /// Test the property 'LotSizeScale'
        /// </summary>
        [Test]
        public void LotSizeScaleTest()
        {
            // TODO unit test for the property 'LotSizeScale'
        }
        /// <summary>
        /// Test the property 'Status'
        /// </summary>
        [Test]
        public void StatusTest()
        {
            // TODO unit test for the property 'Status'
        }
        /// <summary>
        /// Test the property 'Id'
        /// </summary>
        [Test]
        public void IdTest()
        {
            // TODO unit test for the property 'Id'
        }
        /// <summary>
        /// Test the property 'AuctionPrice'
        /// </summary>
        [Test]
        public void AuctionPriceTest()
        {
            // TODO unit test for the property 'AuctionPrice'
        }
        /// <summary>
        /// Test the property 'AuctionSize'
        /// </summary>
        [Test]
        public void AuctionSizeTest()
        {
            // TODO unit test for the property 'AuctionSize'
        }
        /// <summary>
        /// Test the property 'AuctionTime'
        /// </summary>
        [Test]
        public void AuctionTimeTest()
        {
            // TODO unit test for the property 'AuctionTime'
        }
        /// <summary>
        /// Test the property 'Imbalance'
        /// </summary>
        [Test]
        public void ImbalanceTest()
        {
            // TODO unit test for the property 'Imbalance'
        }

    }

}
