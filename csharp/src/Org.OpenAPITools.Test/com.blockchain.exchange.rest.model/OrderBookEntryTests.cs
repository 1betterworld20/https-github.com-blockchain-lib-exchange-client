/* 
 * Blockchain.com Exchange REST API
 *
 * ## Introduction Welcome to Blockchain.com's Exchange API and developer documentation. \\ These documents detail and give examples of various functionality offered by the API such as receiving real time market data, requesting balance information and performing trades. ## To Get Started Create or log into your existing Blockchain.com Exchange account \\ Select API from the drop down menu \\ Fill out form and click “Create New API Key Now” \\ Once generated you can view your keys under API Settings. \\ Please be aware that the API key can only be used once it was verified via email.  The API key must be set via the \\ `X-API-Token`\\ header.  The base URL to be used for all calls is \\ `https://api.blockchain.com/v3/exchange`  Autogenerated clients for this API can be found [here](https://github.com/blockchain/lib-exchange-client). 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using NUnit.Framework;

using System;
using System.Linq;
using System.IO;
using System.Collections.Generic;
using Org.OpenAPITools.com.blockchain.exchange.rest.api;
using Org.OpenAPITools.com.blockchain.exchange.rest.model;
using Org.OpenAPITools.Client;
using System.Reflection;
using Newtonsoft.Json;

namespace Org.OpenAPITools.Test
{
    /// <summary>
    ///  Class for testing OrderBookEntry
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the model.
    /// </remarks>
    public class OrderBookEntryTests
    {
        // TODO uncomment below to declare an instance variable for OrderBookEntry
        //private OrderBookEntry instance;

        /// <summary>
        /// Setup before each test
        /// </summary>
        [SetUp]
        public void Init()
        {
            // TODO uncomment below to create an instance of OrderBookEntry
            //instance = new OrderBookEntry();
        }

        /// <summary>
        /// Clean up after each test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of OrderBookEntry
        /// </summary>
        [Test]
        public void OrderBookEntryInstanceTest()
        {
            // TODO uncomment below to test "IsInstanceOf" OrderBookEntry
            //Assert.IsInstanceOf(typeof(OrderBookEntry), instance);
        }


        /// <summary>
        /// Test the property 'Px'
        /// </summary>
        [Test]
        public void PxTest()
        {
            // TODO unit test for the property 'Px'
        }
        /// <summary>
        /// Test the property 'Qty'
        /// </summary>
        [Test]
        public void QtyTest()
        {
            // TODO unit test for the property 'Qty'
        }
        /// <summary>
        /// Test the property 'Num'
        /// </summary>
        [Test]
        public void NumTest()
        {
            // TODO unit test for the property 'Num'
        }

    }

}
