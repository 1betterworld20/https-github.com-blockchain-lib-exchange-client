/* 
 * Blockchain.com Exchange REST API
 *
 * ## Introduction Welcome to Blockchain.com's Exchange API and developer documentation. These documents detail and give examples of various functionality offered by the API such as receiving real time market data, requesting balance information and performing trades. ## To Get Started Create or log into your existing Blockchain.com Exchange account Select API from the drop down menu Fill out form and click “Create New API Key Now” Once generated you can view your keys under API Settings 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using Org.OpenAPITools.Client;
using Org.OpenAPITools.com.blockchain.exchange.rest.api;
using Org.OpenAPITools.com.blockchain.exchange.rest.model;

namespace Org.OpenAPITools.Test
{
    /// <summary>
    ///  Class for testing PaymentsApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class PaymentsApiTests
    {
        private PaymentsApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new PaymentsApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of PaymentsApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOf' PaymentsApi
            //Assert.IsInstanceOf(typeof(PaymentsApi), instance);
        }

        
        /// <summary>
        /// Test CreateWithdrawal
        /// </summary>
        [Test]
        public void CreateWithdrawalTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CreateWithdrawalRequest createWithdrawalRequest = null;
            //var response = instance.CreateWithdrawal(createWithdrawalRequest);
            //Assert.IsInstanceOf(typeof(WithdrawalInfo), response, "response is WithdrawalInfo");
        }
        
        /// <summary>
        /// Test GetAccountByTypeAndCurrency
        /// </summary>
        [Test]
        public void GetAccountByTypeAndCurrencyTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string account = null;
            //string currency = null;
            //var response = instance.GetAccountByTypeAndCurrency(account, currency);
            //Assert.IsInstanceOf(typeof(Balance), response, "response is Balance");
        }
        
        /// <summary>
        /// Test GetAccounts
        /// </summary>
        [Test]
        public void GetAccountsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.GetAccounts();
            //Assert.IsInstanceOf(typeof(BalanceMap), response, "response is BalanceMap");
        }
        
        /// <summary>
        /// Test GetDepositAddress
        /// </summary>
        [Test]
        public void GetDepositAddressTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string currency = null;
            //var response = instance.GetDepositAddress(currency);
            //Assert.IsInstanceOf(typeof(DepositAddressCrypto), response, "response is DepositAddressCrypto");
        }
        
        /// <summary>
        /// Test GetDepositById
        /// </summary>
        [Test]
        public void GetDepositByIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string depositId = null;
            //var response = instance.GetDepositById(depositId);
            //Assert.IsInstanceOf(typeof(DepositInfo), response, "response is DepositInfo");
        }
        
        /// <summary>
        /// Test GetDeposits
        /// </summary>
        [Test]
        public void GetDepositsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? from = null;
            //long? to = null;
            //var response = instance.GetDeposits(from, to);
            //Assert.IsInstanceOf(typeof(List<DepositInfo>), response, "response is List<DepositInfo>");
        }
        
        /// <summary>
        /// Test GetWhitelist
        /// </summary>
        [Test]
        public void GetWhitelistTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.GetWhitelist();
            //Assert.IsInstanceOf(typeof(List<WhitelistEntry>), response, "response is List<WhitelistEntry>");
        }
        
        /// <summary>
        /// Test GetWhitelistByCurrency
        /// </summary>
        [Test]
        public void GetWhitelistByCurrencyTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string currency = null;
            //var response = instance.GetWhitelistByCurrency(currency);
            //Assert.IsInstanceOf(typeof(List<WhitelistEntry>), response, "response is List<WhitelistEntry>");
        }
        
        /// <summary>
        /// Test GetWithdrawalById
        /// </summary>
        [Test]
        public void GetWithdrawalByIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string withdrawalId = null;
            //var response = instance.GetWithdrawalById(withdrawalId);
            //Assert.IsInstanceOf(typeof(WithdrawalInfo), response, "response is WithdrawalInfo");
        }
        
        /// <summary>
        /// Test GetWithdrawals
        /// </summary>
        [Test]
        public void GetWithdrawalsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? from = null;
            //long? to = null;
            //var response = instance.GetWithdrawals(from, to);
            //Assert.IsInstanceOf(typeof(List<WithdrawalInfo>), response, "response is List<WithdrawalInfo>");
        }
        
    }

}
