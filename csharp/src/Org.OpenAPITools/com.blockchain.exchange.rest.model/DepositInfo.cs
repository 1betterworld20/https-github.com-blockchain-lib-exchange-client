/* 
 * Blockchain.com Exchange REST API
 *
 * ## Introduction Welcome to Blockchain.com's Exchange API and developer documentation. These documents detail and give examples of various functionality offered by the API such as receiving real time market data, requesting balance information and performing trades. ## To Get Started Create or log into your existing Blockchain.com Exchange account Select API from the drop down menu Fill out form and click “Create New API Key Now” Once generated you can view your keys under API Settings 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.com.blockchain.exchange.rest.model
{
    /// <summary>
    /// DepositInfo
    /// </summary>
    [DataContract]
    public partial class DepositInfo :  IEquatable<DepositInfo>, IValidatableObject
    {
        /// <summary>
        /// Defines State
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StateEnum
        {
            /// <summary>
            /// Enum REJECTED for value: REJECTED
            /// </summary>
            [EnumMember(Value = "REJECTED")]
            REJECTED = 1,

            /// <summary>
            /// Enum UNCONFIRMED for value: UNCONFIRMED
            /// </summary>
            [EnumMember(Value = "UNCONFIRMED")]
            UNCONFIRMED = 2,

            /// <summary>
            /// Enum COMPLETED for value: COMPLETED
            /// </summary>
            [EnumMember(Value = "COMPLETED")]
            COMPLETED = 3

        }

        /// <summary>
        /// Gets or Sets State
        /// </summary>
        [DataMember(Name="state", EmitDefaultValue=true)]
        public StateEnum State { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="DepositInfo" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected DepositInfo() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="DepositInfo" /> class.
        /// </summary>
        /// <param name="depositId">Unique ID for this withdrawal (required).</param>
        /// <param name="amount">The amount that is credited in the currency specified (required).</param>
        /// <param name="currency">currency (required).</param>
        /// <param name="address">Address to deposit to. If a tag or memo must be used, it is separated by a colon. (required).</param>
        /// <param name="txHash">The transaction hash of the transaction that deposited funds.</param>
        /// <param name="state">state (required).</param>
        /// <param name="timestamp">Time in ms since 01/01/1970 (epoch).</param>
        public DepositInfo(string depositId = default(string), double amount = default(double), string currency = default(string), string address = default(string), string txHash = default(string), StateEnum state = default(StateEnum), long timestamp = default(long))
        {
            // to ensure "depositId" is required (not null)
            if (depositId == null)
            {
                throw new InvalidDataException("depositId is a required property for DepositInfo and cannot be null");
            }
            else
            {
                this.DepositId = depositId;
            }
            
            // to ensure "amount" is required (not null)
            if (amount == null)
            {
                throw new InvalidDataException("amount is a required property for DepositInfo and cannot be null");
            }
            else
            {
                this.Amount = amount;
            }
            
            // to ensure "currency" is required (not null)
            if (currency == null)
            {
                throw new InvalidDataException("currency is a required property for DepositInfo and cannot be null");
            }
            else
            {
                this.Currency = currency;
            }
            
            // to ensure "address" is required (not null)
            if (address == null)
            {
                throw new InvalidDataException("address is a required property for DepositInfo and cannot be null");
            }
            else
            {
                this.Address = address;
            }
            
            // to ensure "state" is required (not null)
            if (state == null)
            {
                throw new InvalidDataException("state is a required property for DepositInfo and cannot be null");
            }
            else
            {
                this.State = state;
            }
            
            this.TxHash = txHash;
            this.Timestamp = timestamp;
        }
        
        /// <summary>
        /// Unique ID for this withdrawal
        /// </summary>
        /// <value>Unique ID for this withdrawal</value>
        [DataMember(Name="depositId", EmitDefaultValue=true)]
        public string DepositId { get; set; }

        /// <summary>
        /// The amount that is credited in the currency specified
        /// </summary>
        /// <value>The amount that is credited in the currency specified</value>
        [DataMember(Name="amount", EmitDefaultValue=true)]
        public double Amount { get; set; }

        /// <summary>
        /// Gets or Sets Currency
        /// </summary>
        [DataMember(Name="currency", EmitDefaultValue=true)]
        public string Currency { get; set; }

        /// <summary>
        /// Address to deposit to. If a tag or memo must be used, it is separated by a colon.
        /// </summary>
        /// <value>Address to deposit to. If a tag or memo must be used, it is separated by a colon.</value>
        [DataMember(Name="address", EmitDefaultValue=true)]
        public string Address { get; set; }

        /// <summary>
        /// The transaction hash of the transaction that deposited funds
        /// </summary>
        /// <value>The transaction hash of the transaction that deposited funds</value>
        [DataMember(Name="txHash", EmitDefaultValue=false)]
        public string TxHash { get; set; }


        /// <summary>
        /// Time in ms since 01/01/1970 (epoch)
        /// </summary>
        /// <value>Time in ms since 01/01/1970 (epoch)</value>
        [DataMember(Name="timestamp", EmitDefaultValue=false)]
        public long Timestamp { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DepositInfo {\n");
            sb.Append("  DepositId: ").Append(DepositId).Append("\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("  Currency: ").Append(Currency).Append("\n");
            sb.Append("  Address: ").Append(Address).Append("\n");
            sb.Append("  TxHash: ").Append(TxHash).Append("\n");
            sb.Append("  State: ").Append(State).Append("\n");
            sb.Append("  Timestamp: ").Append(Timestamp).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DepositInfo);
        }

        /// <summary>
        /// Returns true if DepositInfo instances are equal
        /// </summary>
        /// <param name="input">Instance of DepositInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DepositInfo input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.DepositId == input.DepositId ||
                    (this.DepositId != null &&
                    this.DepositId.Equals(input.DepositId))
                ) && 
                (
                    this.Amount == input.Amount ||
                    (this.Amount != null &&
                    this.Amount.Equals(input.Amount))
                ) && 
                (
                    this.Currency == input.Currency ||
                    (this.Currency != null &&
                    this.Currency.Equals(input.Currency))
                ) && 
                (
                    this.Address == input.Address ||
                    (this.Address != null &&
                    this.Address.Equals(input.Address))
                ) && 
                (
                    this.TxHash == input.TxHash ||
                    (this.TxHash != null &&
                    this.TxHash.Equals(input.TxHash))
                ) && 
                (
                    this.State == input.State ||
                    (this.State != null &&
                    this.State.Equals(input.State))
                ) && 
                (
                    this.Timestamp == input.Timestamp ||
                    (this.Timestamp != null &&
                    this.Timestamp.Equals(input.Timestamp))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.DepositId != null)
                    hashCode = hashCode * 59 + this.DepositId.GetHashCode();
                if (this.Amount != null)
                    hashCode = hashCode * 59 + this.Amount.GetHashCode();
                if (this.Currency != null)
                    hashCode = hashCode * 59 + this.Currency.GetHashCode();
                if (this.Address != null)
                    hashCode = hashCode * 59 + this.Address.GetHashCode();
                if (this.TxHash != null)
                    hashCode = hashCode * 59 + this.TxHash.GetHashCode();
                if (this.State != null)
                    hashCode = hashCode * 59 + this.State.GetHashCode();
                if (this.Timestamp != null)
                    hashCode = hashCode * 59 + this.Timestamp.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {

            
            // Currency (string) pattern
            Regex regexCurrency = new Regex(@"^[A-Z]{3,5}$", RegexOptions.CultureInvariant);
            if (false == regexCurrency.Match(this.Currency).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Currency, must match a pattern of " + regexCurrency, new [] { "Currency" });
            }

            yield break;
        }
    }

}
