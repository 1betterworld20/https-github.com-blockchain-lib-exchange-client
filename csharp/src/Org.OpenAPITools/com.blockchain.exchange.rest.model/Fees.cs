/* 
 * Blockchain.com Exchange REST API
 *
 * ## Introduction Welcome to Blockchain.com's Exchange API and developer documentation. These documents detail and give examples of various functionality offered by the API such as receiving real time market data, requesting balance information and performing trades. ## To Get Started Create or log into your existing Blockchain.com Exchange account Select API from the drop down menu Fill out form and click “Create New API Key Now” Once generated you can view your keys under API Settings 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.com.blockchain.exchange.rest.model
{
    /// <summary>
    /// Fees
    /// </summary>
    [DataContract]
    public partial class Fees :  IEquatable<Fees>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Fees" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Fees() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Fees" /> class.
        /// </summary>
        /// <param name="tier">tier.</param>
        /// <param name="makerRate">makerRate (required).</param>
        /// <param name="takerRate">takerRate (required).</param>
        /// <param name="volumeInUSD">volumeInUSD (required).</param>
        public Fees(int tier = default(int), double makerRate = default(double), double takerRate = default(double), double volumeInUSD = default(double))
        {
            // to ensure "makerRate" is required (not null)
            if (makerRate == null)
            {
                throw new InvalidDataException("makerRate is a required property for Fees and cannot be null");
            }
            else
            {
                this.MakerRate = makerRate;
            }
            
            // to ensure "takerRate" is required (not null)
            if (takerRate == null)
            {
                throw new InvalidDataException("takerRate is a required property for Fees and cannot be null");
            }
            else
            {
                this.TakerRate = takerRate;
            }
            
            // to ensure "volumeInUSD" is required (not null)
            if (volumeInUSD == null)
            {
                throw new InvalidDataException("volumeInUSD is a required property for Fees and cannot be null");
            }
            else
            {
                this.VolumeInUSD = volumeInUSD;
            }
            
            this.Tier = tier;
        }
        
        /// <summary>
        /// Gets or Sets Tier
        /// </summary>
        [DataMember(Name="tier", EmitDefaultValue=false)]
        public int Tier { get; set; }

        /// <summary>
        /// Gets or Sets MakerRate
        /// </summary>
        [DataMember(Name="makerRate", EmitDefaultValue=true)]
        public double MakerRate { get; set; }

        /// <summary>
        /// Gets or Sets TakerRate
        /// </summary>
        [DataMember(Name="takerRate", EmitDefaultValue=true)]
        public double TakerRate { get; set; }

        /// <summary>
        /// Gets or Sets VolumeInUSD
        /// </summary>
        [DataMember(Name="volumeInUSD", EmitDefaultValue=true)]
        public double VolumeInUSD { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Fees {\n");
            sb.Append("  Tier: ").Append(Tier).Append("\n");
            sb.Append("  MakerRate: ").Append(MakerRate).Append("\n");
            sb.Append("  TakerRate: ").Append(TakerRate).Append("\n");
            sb.Append("  VolumeInUSD: ").Append(VolumeInUSD).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Fees);
        }

        /// <summary>
        /// Returns true if Fees instances are equal
        /// </summary>
        /// <param name="input">Instance of Fees to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Fees input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Tier == input.Tier ||
                    (this.Tier != null &&
                    this.Tier.Equals(input.Tier))
                ) && 
                (
                    this.MakerRate == input.MakerRate ||
                    (this.MakerRate != null &&
                    this.MakerRate.Equals(input.MakerRate))
                ) && 
                (
                    this.TakerRate == input.TakerRate ||
                    (this.TakerRate != null &&
                    this.TakerRate.Equals(input.TakerRate))
                ) && 
                (
                    this.VolumeInUSD == input.VolumeInUSD ||
                    (this.VolumeInUSD != null &&
                    this.VolumeInUSD.Equals(input.VolumeInUSD))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Tier != null)
                    hashCode = hashCode * 59 + this.Tier.GetHashCode();
                if (this.MakerRate != null)
                    hashCode = hashCode * 59 + this.MakerRate.GetHashCode();
                if (this.TakerRate != null)
                    hashCode = hashCode * 59 + this.TakerRate.GetHashCode();
                if (this.VolumeInUSD != null)
                    hashCode = hashCode * 59 + this.VolumeInUSD.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
