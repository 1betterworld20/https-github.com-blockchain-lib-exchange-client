/* 
 * Blockchain.com Exchange REST API
 *
 * ## Introduction Welcome to Blockchain.com's Exchange API and developer documentation. These documents detail and give examples of various functionality offered by the API such as receiving real time market data, requesting balance information and performing trades. ## To Get Started Create or log into your existing Blockchain.com Exchange account Select API from the drop down menu Fill out form and click “Create New API Key Now” Once generated you can view your keys under API Settings 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.com.blockchain.exchange.rest.model
{
    /// <summary>
    /// Balance
    /// </summary>
    [DataContract]
    public partial class Balance :  IEquatable<Balance>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Balance" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Balance() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Balance" /> class.
        /// </summary>
        /// <param name="currency">currency (required).</param>
        /// <param name="balance">balance (required).</param>
        /// <param name="available">available (required).</param>
        /// <param name="balanceLocal">balanceLocal (required).</param>
        /// <param name="availableLocal">availableLocal (required).</param>
        /// <param name="rate">rate (required).</param>
        public Balance(string currency = default(string), double balance = default(double), double available = default(double), double balanceLocal = default(double), double availableLocal = default(double), double rate = default(double))
        {
            // to ensure "currency" is required (not null)
            if (currency == null)
            {
                throw new InvalidDataException("currency is a required property for Balance and cannot be null");
            }
            else
            {
                this.Currency = currency;
            }
            
            // to ensure "balance" is required (not null)
            if (balance == null)
            {
                throw new InvalidDataException("balance is a required property for Balance and cannot be null");
            }
            else
            {
                this._Balance = balance;
            }
            
            // to ensure "available" is required (not null)
            if (available == null)
            {
                throw new InvalidDataException("available is a required property for Balance and cannot be null");
            }
            else
            {
                this.Available = available;
            }
            
            // to ensure "balanceLocal" is required (not null)
            if (balanceLocal == null)
            {
                throw new InvalidDataException("balanceLocal is a required property for Balance and cannot be null");
            }
            else
            {
                this.BalanceLocal = balanceLocal;
            }
            
            // to ensure "availableLocal" is required (not null)
            if (availableLocal == null)
            {
                throw new InvalidDataException("availableLocal is a required property for Balance and cannot be null");
            }
            else
            {
                this.AvailableLocal = availableLocal;
            }
            
            // to ensure "rate" is required (not null)
            if (rate == null)
            {
                throw new InvalidDataException("rate is a required property for Balance and cannot be null");
            }
            else
            {
                this.Rate = rate;
            }
            
        }
        
        /// <summary>
        /// Gets or Sets Currency
        /// </summary>
        [DataMember(Name="currency", EmitDefaultValue=true)]
        public string Currency { get; set; }

        /// <summary>
        /// Gets or Sets _Balance
        /// </summary>
        [DataMember(Name="balance", EmitDefaultValue=true)]
        public double _Balance { get; set; }

        /// <summary>
        /// Gets or Sets Available
        /// </summary>
        [DataMember(Name="available", EmitDefaultValue=true)]
        public double Available { get; set; }

        /// <summary>
        /// Gets or Sets BalanceLocal
        /// </summary>
        [DataMember(Name="balance_local", EmitDefaultValue=true)]
        public double BalanceLocal { get; set; }

        /// <summary>
        /// Gets or Sets AvailableLocal
        /// </summary>
        [DataMember(Name="available_local", EmitDefaultValue=true)]
        public double AvailableLocal { get; set; }

        /// <summary>
        /// Gets or Sets Rate
        /// </summary>
        [DataMember(Name="rate", EmitDefaultValue=true)]
        public double Rate { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Balance {\n");
            sb.Append("  Currency: ").Append(Currency).Append("\n");
            sb.Append("  _Balance: ").Append(_Balance).Append("\n");
            sb.Append("  Available: ").Append(Available).Append("\n");
            sb.Append("  BalanceLocal: ").Append(BalanceLocal).Append("\n");
            sb.Append("  AvailableLocal: ").Append(AvailableLocal).Append("\n");
            sb.Append("  Rate: ").Append(Rate).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Balance);
        }

        /// <summary>
        /// Returns true if Balance instances are equal
        /// </summary>
        /// <param name="input">Instance of Balance to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Balance input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Currency == input.Currency ||
                    (this.Currency != null &&
                    this.Currency.Equals(input.Currency))
                ) && 
                (
                    this._Balance == input._Balance ||
                    (this._Balance != null &&
                    this._Balance.Equals(input._Balance))
                ) && 
                (
                    this.Available == input.Available ||
                    (this.Available != null &&
                    this.Available.Equals(input.Available))
                ) && 
                (
                    this.BalanceLocal == input.BalanceLocal ||
                    (this.BalanceLocal != null &&
                    this.BalanceLocal.Equals(input.BalanceLocal))
                ) && 
                (
                    this.AvailableLocal == input.AvailableLocal ||
                    (this.AvailableLocal != null &&
                    this.AvailableLocal.Equals(input.AvailableLocal))
                ) && 
                (
                    this.Rate == input.Rate ||
                    (this.Rate != null &&
                    this.Rate.Equals(input.Rate))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Currency != null)
                    hashCode = hashCode * 59 + this.Currency.GetHashCode();
                if (this._Balance != null)
                    hashCode = hashCode * 59 + this._Balance.GetHashCode();
                if (this.Available != null)
                    hashCode = hashCode * 59 + this.Available.GetHashCode();
                if (this.BalanceLocal != null)
                    hashCode = hashCode * 59 + this.BalanceLocal.GetHashCode();
                if (this.AvailableLocal != null)
                    hashCode = hashCode * 59 + this.AvailableLocal.GetHashCode();
                if (this.Rate != null)
                    hashCode = hashCode * 59 + this.Rate.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {

            
            // Currency (string) pattern
            Regex regexCurrency = new Regex(@"^[A-Z]{3,5}$", RegexOptions.CultureInvariant);
            if (false == regexCurrency.Match(this.Currency).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Currency, must match a pattern of " + regexCurrency, new [] { "Currency" });
            }

            yield break;
        }
    }

}
