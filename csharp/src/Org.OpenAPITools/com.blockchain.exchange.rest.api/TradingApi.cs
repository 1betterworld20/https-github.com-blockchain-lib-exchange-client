/* 
 * Blockchain.com Exchange REST API
 *
 * ## Introduction Welcome to Blockchain.com's Exchange API and developer documentation. \\ These documents detail and give examples of various functionality offered by the API such as receiving real time market data, requesting balance information and performing trades. ## To Get Started Create or log into your existing Blockchain.com Exchange account \\ Select API from the drop down menu \\ Fill out form and click “Create New API Key Now” \\ Once generated you can view your keys under API Settings. \\ Please be aware that the API key can only be used once it was verified via email.  The API key must be set via the \\ `X-API-Token`\\ header.  The base URL to be used for all calls is \\ `https://api.blockchain.com/v3/exchange`  Autogenerated clients for this API can be found [here](https://github.com/blockchain/lib-exchange-client). 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Org.OpenAPITools.Client;
using Org.OpenAPITools.com.blockchain.exchange.rest.model;

namespace Org.OpenAPITools.com.blockchain.exchange.rest.api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ITradingApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Add an order
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="baseOrder">Trade</param>
        /// <returns>OrderSummary</returns>
        OrderSummary CreateOrder (BaseOrder baseOrder);

        /// <summary>
        /// Add an order
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="baseOrder">Trade</param>
        /// <returns>ApiResponse of OrderSummary</returns>
        ApiResponse<OrderSummary> CreateOrderWithHttpInfo (BaseOrder baseOrder);
        /// <summary>
        /// Delete all open orders (of a symbol, if specified)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol"> (optional)</param>
        /// <returns></returns>
        void DeleteAllOrders (string symbol = default(string));

        /// <summary>
        /// Delete all open orders (of a symbol, if specified)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteAllOrdersWithHttpInfo (string symbol = default(string));
        /// <summary>
        /// Cancel a trade
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">Order ID</param>
        /// <returns></returns>
        void DeleteOrder (long orderId);

        /// <summary>
        /// Cancel a trade
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">Order ID</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteOrderWithHttpInfo (long orderId);
        /// <summary>
        /// Get current fee level
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Fees</returns>
        Fees GetFees ();

        /// <summary>
        /// Get current fee level
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Fees</returns>
        ApiResponse<Fees> GetFeesWithHttpInfo ();
        /// <summary>
        /// Get a list of filled orders
        /// </summary>
        /// <remarks>
        /// Returns filled orders, including partial fills. Returns at most 100 results, use timestamp to paginate for further results
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Only return results for this symbol (optional)</param>
        /// <param name="from">Epoch timestamp in ms (optional)</param>
        /// <param name="to">Epoch timestamp in ms (optional)</param>
        /// <param name="limit">Maximum amount of results to return in a single call. If omitted, 100 results are returned by default.  (optional)</param>
        /// <returns>List&lt;OrderSummary&gt;</returns>
        List<OrderSummary> GetFills (string symbol = default(string), long? from = default(long?), long? to = default(long?), int? limit = default(int?));

        /// <summary>
        /// Get a list of filled orders
        /// </summary>
        /// <remarks>
        /// Returns filled orders, including partial fills. Returns at most 100 results, use timestamp to paginate for further results
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Only return results for this symbol (optional)</param>
        /// <param name="from">Epoch timestamp in ms (optional)</param>
        /// <param name="to">Epoch timestamp in ms (optional)</param>
        /// <param name="limit">Maximum amount of results to return in a single call. If omitted, 100 results are returned by default.  (optional)</param>
        /// <returns>ApiResponse of List&lt;OrderSummary&gt;</returns>
        ApiResponse<List<OrderSummary>> GetFillsWithHttpInfo (string symbol = default(string), long? from = default(long?), long? to = default(long?), int? limit = default(int?));
        /// <summary>
        /// Get a specific order
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">Order ID</param>
        /// <returns>OrderSummary</returns>
        OrderSummary GetOrderById (long orderId);

        /// <summary>
        /// Get a specific order
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">Order ID</param>
        /// <returns>ApiResponse of OrderSummary</returns>
        ApiResponse<OrderSummary> GetOrderByIdWithHttpInfo (long orderId);
        /// <summary>
        /// Get a list orders
        /// </summary>
        /// <remarks>
        /// Returns live and historic orders, defaulting to live orders. Returns at most 100 results, use timestamp to paginate for further results
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Only return results for this symbol (optional)</param>
        /// <param name="from">Epoch timestamp in ms (optional)</param>
        /// <param name="to">Epoch timestamp in ms (optional)</param>
        /// <param name="status">Order Status (optional)</param>
        /// <param name="limit">Maximum amount of results to return in a single call. If omitted, 100 results are returned by default.  (optional)</param>
        /// <returns>List&lt;OrderSummary&gt;</returns>
        List<OrderSummary> GetOrders (string symbol = default(string), long? from = default(long?), long? to = default(long?), OrderStatus? status = default(OrderStatus?), int? limit = default(int?));

        /// <summary>
        /// Get a list orders
        /// </summary>
        /// <remarks>
        /// Returns live and historic orders, defaulting to live orders. Returns at most 100 results, use timestamp to paginate for further results
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Only return results for this symbol (optional)</param>
        /// <param name="from">Epoch timestamp in ms (optional)</param>
        /// <param name="to">Epoch timestamp in ms (optional)</param>
        /// <param name="status">Order Status (optional)</param>
        /// <param name="limit">Maximum amount of results to return in a single call. If omitted, 100 results are returned by default.  (optional)</param>
        /// <returns>ApiResponse of List&lt;OrderSummary&gt;</returns>
        ApiResponse<List<OrderSummary>> GetOrdersWithHttpInfo (string symbol = default(string), long? from = default(long?), long? to = default(long?), OrderStatus? status = default(OrderStatus?), int? limit = default(int?));
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Add an order
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="baseOrder">Trade</param>
        /// <returns>Task of OrderSummary</returns>
        System.Threading.Tasks.Task<OrderSummary> CreateOrderAsync (BaseOrder baseOrder);

        /// <summary>
        /// Add an order
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="baseOrder">Trade</param>
        /// <returns>Task of ApiResponse (OrderSummary)</returns>
        System.Threading.Tasks.Task<ApiResponse<OrderSummary>> CreateOrderAsyncWithHttpInfo (BaseOrder baseOrder);
        /// <summary>
        /// Delete all open orders (of a symbol, if specified)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteAllOrdersAsync (string symbol = default(string));

        /// <summary>
        /// Delete all open orders (of a symbol, if specified)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteAllOrdersAsyncWithHttpInfo (string symbol = default(string));
        /// <summary>
        /// Cancel a trade
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">Order ID</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteOrderAsync (long orderId);

        /// <summary>
        /// Cancel a trade
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">Order ID</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteOrderAsyncWithHttpInfo (long orderId);
        /// <summary>
        /// Get current fee level
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of Fees</returns>
        System.Threading.Tasks.Task<Fees> GetFeesAsync ();

        /// <summary>
        /// Get current fee level
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (Fees)</returns>
        System.Threading.Tasks.Task<ApiResponse<Fees>> GetFeesAsyncWithHttpInfo ();
        /// <summary>
        /// Get a list of filled orders
        /// </summary>
        /// <remarks>
        /// Returns filled orders, including partial fills. Returns at most 100 results, use timestamp to paginate for further results
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Only return results for this symbol (optional)</param>
        /// <param name="from">Epoch timestamp in ms (optional)</param>
        /// <param name="to">Epoch timestamp in ms (optional)</param>
        /// <param name="limit">Maximum amount of results to return in a single call. If omitted, 100 results are returned by default.  (optional)</param>
        /// <returns>Task of List&lt;OrderSummary&gt;</returns>
        System.Threading.Tasks.Task<List<OrderSummary>> GetFillsAsync (string symbol = default(string), long? from = default(long?), long? to = default(long?), int? limit = default(int?));

        /// <summary>
        /// Get a list of filled orders
        /// </summary>
        /// <remarks>
        /// Returns filled orders, including partial fills. Returns at most 100 results, use timestamp to paginate for further results
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Only return results for this symbol (optional)</param>
        /// <param name="from">Epoch timestamp in ms (optional)</param>
        /// <param name="to">Epoch timestamp in ms (optional)</param>
        /// <param name="limit">Maximum amount of results to return in a single call. If omitted, 100 results are returned by default.  (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;OrderSummary&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<OrderSummary>>> GetFillsAsyncWithHttpInfo (string symbol = default(string), long? from = default(long?), long? to = default(long?), int? limit = default(int?));
        /// <summary>
        /// Get a specific order
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">Order ID</param>
        /// <returns>Task of OrderSummary</returns>
        System.Threading.Tasks.Task<OrderSummary> GetOrderByIdAsync (long orderId);

        /// <summary>
        /// Get a specific order
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">Order ID</param>
        /// <returns>Task of ApiResponse (OrderSummary)</returns>
        System.Threading.Tasks.Task<ApiResponse<OrderSummary>> GetOrderByIdAsyncWithHttpInfo (long orderId);
        /// <summary>
        /// Get a list orders
        /// </summary>
        /// <remarks>
        /// Returns live and historic orders, defaulting to live orders. Returns at most 100 results, use timestamp to paginate for further results
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Only return results for this symbol (optional)</param>
        /// <param name="from">Epoch timestamp in ms (optional)</param>
        /// <param name="to">Epoch timestamp in ms (optional)</param>
        /// <param name="status">Order Status (optional)</param>
        /// <param name="limit">Maximum amount of results to return in a single call. If omitted, 100 results are returned by default.  (optional)</param>
        /// <returns>Task of List&lt;OrderSummary&gt;</returns>
        System.Threading.Tasks.Task<List<OrderSummary>> GetOrdersAsync (string symbol = default(string), long? from = default(long?), long? to = default(long?), OrderStatus? status = default(OrderStatus?), int? limit = default(int?));

        /// <summary>
        /// Get a list orders
        /// </summary>
        /// <remarks>
        /// Returns live and historic orders, defaulting to live orders. Returns at most 100 results, use timestamp to paginate for further results
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Only return results for this symbol (optional)</param>
        /// <param name="from">Epoch timestamp in ms (optional)</param>
        /// <param name="to">Epoch timestamp in ms (optional)</param>
        /// <param name="status">Order Status (optional)</param>
        /// <param name="limit">Maximum amount of results to return in a single call. If omitted, 100 results are returned by default.  (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;OrderSummary&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<OrderSummary>>> GetOrdersAsyncWithHttpInfo (string symbol = default(string), long? from = default(long?), long? to = default(long?), OrderStatus? status = default(OrderStatus?), int? limit = default(int?));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class TradingApi : ITradingApi
    {
        private Org.OpenAPITools.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="TradingApi"/> class.
        /// </summary>
        /// <returns></returns>
        public TradingApi(String basePath)
        {
            this.Configuration = new Org.OpenAPITools.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TradingApi"/> class
        /// </summary>
        /// <returns></returns>
        public TradingApi()
        {
            this.Configuration = Org.OpenAPITools.Client.Configuration.Default;

            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TradingApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public TradingApi(Org.OpenAPITools.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Org.OpenAPITools.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Org.OpenAPITools.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Org.OpenAPITools.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Add an order 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="baseOrder">Trade</param>
        /// <returns>OrderSummary</returns>
        public OrderSummary CreateOrder (BaseOrder baseOrder)
        {
             ApiResponse<OrderSummary> localVarResponse = CreateOrderWithHttpInfo(baseOrder);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Add an order 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="baseOrder">Trade</param>
        /// <returns>ApiResponse of OrderSummary</returns>
        public ApiResponse<OrderSummary> CreateOrderWithHttpInfo (BaseOrder baseOrder)
        {
            // verify the required parameter 'baseOrder' is set
            if (baseOrder == null)
                throw new ApiException(400, "Missing required parameter 'baseOrder' when calling TradingApi->CreateOrder");

            var localVarPath = "/orders";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (baseOrder != null && baseOrder.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(baseOrder); // http body (model) parameter
            }
            else
            {
                localVarPostBody = baseOrder; // byte array
            }

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateOrder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OrderSummary>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (OrderSummary) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(OrderSummary)));
        }

        /// <summary>
        /// Add an order 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="baseOrder">Trade</param>
        /// <returns>Task of OrderSummary</returns>
        public async System.Threading.Tasks.Task<OrderSummary> CreateOrderAsync (BaseOrder baseOrder)
        {
             ApiResponse<OrderSummary> localVarResponse = await CreateOrderAsyncWithHttpInfo(baseOrder);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Add an order 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="baseOrder">Trade</param>
        /// <returns>Task of ApiResponse (OrderSummary)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<OrderSummary>> CreateOrderAsyncWithHttpInfo (BaseOrder baseOrder)
        {
            // verify the required parameter 'baseOrder' is set
            if (baseOrder == null)
                throw new ApiException(400, "Missing required parameter 'baseOrder' when calling TradingApi->CreateOrder");

            var localVarPath = "/orders";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (baseOrder != null && baseOrder.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(baseOrder); // http body (model) parameter
            }
            else
            {
                localVarPostBody = baseOrder; // byte array
            }

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateOrder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OrderSummary>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (OrderSummary) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(OrderSummary)));
        }

        /// <summary>
        /// Delete all open orders (of a symbol, if specified) 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol"> (optional)</param>
        /// <returns></returns>
        public void DeleteAllOrders (string symbol = default(string))
        {
             DeleteAllOrdersWithHttpInfo(symbol);
        }

        /// <summary>
        /// Delete all open orders (of a symbol, if specified) 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteAllOrdersWithHttpInfo (string symbol = default(string))
        {

            var localVarPath = "/orders";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (symbol != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "symbol", symbol)); // query parameter

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteAllOrders", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Delete all open orders (of a symbol, if specified) 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteAllOrdersAsync (string symbol = default(string))
        {
             await DeleteAllOrdersAsyncWithHttpInfo(symbol);

        }

        /// <summary>
        /// Delete all open orders (of a symbol, if specified) 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteAllOrdersAsyncWithHttpInfo (string symbol = default(string))
        {

            var localVarPath = "/orders";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (symbol != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "symbol", symbol)); // query parameter

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteAllOrders", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Cancel a trade 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">Order ID</param>
        /// <returns></returns>
        public void DeleteOrder (long orderId)
        {
             DeleteOrderWithHttpInfo(orderId);
        }

        /// <summary>
        /// Cancel a trade 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">Order ID</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteOrderWithHttpInfo (long orderId)
        {
            // verify the required parameter 'orderId' is set
            if (orderId == null)
                throw new ApiException(400, "Missing required parameter 'orderId' when calling TradingApi->DeleteOrder");

            var localVarPath = "/orders/{orderId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (orderId != null) localVarPathParams.Add("orderId", this.Configuration.ApiClient.ParameterToString(orderId)); // path parameter

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteOrder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Cancel a trade 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">Order ID</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteOrderAsync (long orderId)
        {
             await DeleteOrderAsyncWithHttpInfo(orderId);

        }

        /// <summary>
        /// Cancel a trade 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">Order ID</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteOrderAsyncWithHttpInfo (long orderId)
        {
            // verify the required parameter 'orderId' is set
            if (orderId == null)
                throw new ApiException(400, "Missing required parameter 'orderId' when calling TradingApi->DeleteOrder");

            var localVarPath = "/orders/{orderId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (orderId != null) localVarPathParams.Add("orderId", this.Configuration.ApiClient.ParameterToString(orderId)); // path parameter

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteOrder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Get current fee level 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Fees</returns>
        public Fees GetFees ()
        {
             ApiResponse<Fees> localVarResponse = GetFeesWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get current fee level 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Fees</returns>
        public ApiResponse<Fees> GetFeesWithHttpInfo ()
        {

            var localVarPath = "/fees";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetFees", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Fees>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Fees) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Fees)));
        }

        /// <summary>
        /// Get current fee level 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of Fees</returns>
        public async System.Threading.Tasks.Task<Fees> GetFeesAsync ()
        {
             ApiResponse<Fees> localVarResponse = await GetFeesAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get current fee level 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (Fees)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Fees>> GetFeesAsyncWithHttpInfo ()
        {

            var localVarPath = "/fees";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetFees", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Fees>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Fees) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Fees)));
        }

        /// <summary>
        /// Get a list of filled orders Returns filled orders, including partial fills. Returns at most 100 results, use timestamp to paginate for further results
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Only return results for this symbol (optional)</param>
        /// <param name="from">Epoch timestamp in ms (optional)</param>
        /// <param name="to">Epoch timestamp in ms (optional)</param>
        /// <param name="limit">Maximum amount of results to return in a single call. If omitted, 100 results are returned by default.  (optional)</param>
        /// <returns>List&lt;OrderSummary&gt;</returns>
        public List<OrderSummary> GetFills (string symbol = default(string), long? from = default(long?), long? to = default(long?), int? limit = default(int?))
        {
             ApiResponse<List<OrderSummary>> localVarResponse = GetFillsWithHttpInfo(symbol, from, to, limit);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a list of filled orders Returns filled orders, including partial fills. Returns at most 100 results, use timestamp to paginate for further results
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Only return results for this symbol (optional)</param>
        /// <param name="from">Epoch timestamp in ms (optional)</param>
        /// <param name="to">Epoch timestamp in ms (optional)</param>
        /// <param name="limit">Maximum amount of results to return in a single call. If omitted, 100 results are returned by default.  (optional)</param>
        /// <returns>ApiResponse of List&lt;OrderSummary&gt;</returns>
        public ApiResponse<List<OrderSummary>> GetFillsWithHttpInfo (string symbol = default(string), long? from = default(long?), long? to = default(long?), int? limit = default(int?))
        {

            var localVarPath = "/trades";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (symbol != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "symbol", symbol)); // query parameter
            if (from != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "from", from)); // query parameter
            if (to != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "to", to)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetFills", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<OrderSummary>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<OrderSummary>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<OrderSummary>)));
        }

        /// <summary>
        /// Get a list of filled orders Returns filled orders, including partial fills. Returns at most 100 results, use timestamp to paginate for further results
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Only return results for this symbol (optional)</param>
        /// <param name="from">Epoch timestamp in ms (optional)</param>
        /// <param name="to">Epoch timestamp in ms (optional)</param>
        /// <param name="limit">Maximum amount of results to return in a single call. If omitted, 100 results are returned by default.  (optional)</param>
        /// <returns>Task of List&lt;OrderSummary&gt;</returns>
        public async System.Threading.Tasks.Task<List<OrderSummary>> GetFillsAsync (string symbol = default(string), long? from = default(long?), long? to = default(long?), int? limit = default(int?))
        {
             ApiResponse<List<OrderSummary>> localVarResponse = await GetFillsAsyncWithHttpInfo(symbol, from, to, limit);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a list of filled orders Returns filled orders, including partial fills. Returns at most 100 results, use timestamp to paginate for further results
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Only return results for this symbol (optional)</param>
        /// <param name="from">Epoch timestamp in ms (optional)</param>
        /// <param name="to">Epoch timestamp in ms (optional)</param>
        /// <param name="limit">Maximum amount of results to return in a single call. If omitted, 100 results are returned by default.  (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;OrderSummary&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<OrderSummary>>> GetFillsAsyncWithHttpInfo (string symbol = default(string), long? from = default(long?), long? to = default(long?), int? limit = default(int?))
        {

            var localVarPath = "/trades";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (symbol != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "symbol", symbol)); // query parameter
            if (from != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "from", from)); // query parameter
            if (to != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "to", to)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetFills", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<OrderSummary>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<OrderSummary>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<OrderSummary>)));
        }

        /// <summary>
        /// Get a specific order 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">Order ID</param>
        /// <returns>OrderSummary</returns>
        public OrderSummary GetOrderById (long orderId)
        {
             ApiResponse<OrderSummary> localVarResponse = GetOrderByIdWithHttpInfo(orderId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a specific order 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">Order ID</param>
        /// <returns>ApiResponse of OrderSummary</returns>
        public ApiResponse<OrderSummary> GetOrderByIdWithHttpInfo (long orderId)
        {
            // verify the required parameter 'orderId' is set
            if (orderId == null)
                throw new ApiException(400, "Missing required parameter 'orderId' when calling TradingApi->GetOrderById");

            var localVarPath = "/orders/{orderId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (orderId != null) localVarPathParams.Add("orderId", this.Configuration.ApiClient.ParameterToString(orderId)); // path parameter

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetOrderById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OrderSummary>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (OrderSummary) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(OrderSummary)));
        }

        /// <summary>
        /// Get a specific order 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">Order ID</param>
        /// <returns>Task of OrderSummary</returns>
        public async System.Threading.Tasks.Task<OrderSummary> GetOrderByIdAsync (long orderId)
        {
             ApiResponse<OrderSummary> localVarResponse = await GetOrderByIdAsyncWithHttpInfo(orderId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a specific order 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">Order ID</param>
        /// <returns>Task of ApiResponse (OrderSummary)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<OrderSummary>> GetOrderByIdAsyncWithHttpInfo (long orderId)
        {
            // verify the required parameter 'orderId' is set
            if (orderId == null)
                throw new ApiException(400, "Missing required parameter 'orderId' when calling TradingApi->GetOrderById");

            var localVarPath = "/orders/{orderId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (orderId != null) localVarPathParams.Add("orderId", this.Configuration.ApiClient.ParameterToString(orderId)); // path parameter

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetOrderById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OrderSummary>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (OrderSummary) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(OrderSummary)));
        }

        /// <summary>
        /// Get a list orders Returns live and historic orders, defaulting to live orders. Returns at most 100 results, use timestamp to paginate for further results
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Only return results for this symbol (optional)</param>
        /// <param name="from">Epoch timestamp in ms (optional)</param>
        /// <param name="to">Epoch timestamp in ms (optional)</param>
        /// <param name="status">Order Status (optional)</param>
        /// <param name="limit">Maximum amount of results to return in a single call. If omitted, 100 results are returned by default.  (optional)</param>
        /// <returns>List&lt;OrderSummary&gt;</returns>
        public List<OrderSummary> GetOrders (string symbol = default(string), long? from = default(long?), long? to = default(long?), OrderStatus? status = default(OrderStatus?), int? limit = default(int?))
        {
             ApiResponse<List<OrderSummary>> localVarResponse = GetOrdersWithHttpInfo(symbol, from, to, status, limit);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a list orders Returns live and historic orders, defaulting to live orders. Returns at most 100 results, use timestamp to paginate for further results
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Only return results for this symbol (optional)</param>
        /// <param name="from">Epoch timestamp in ms (optional)</param>
        /// <param name="to">Epoch timestamp in ms (optional)</param>
        /// <param name="status">Order Status (optional)</param>
        /// <param name="limit">Maximum amount of results to return in a single call. If omitted, 100 results are returned by default.  (optional)</param>
        /// <returns>ApiResponse of List&lt;OrderSummary&gt;</returns>
        public ApiResponse<List<OrderSummary>> GetOrdersWithHttpInfo (string symbol = default(string), long? from = default(long?), long? to = default(long?), OrderStatus? status = default(OrderStatus?), int? limit = default(int?))
        {

            var localVarPath = "/orders";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (symbol != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "symbol", symbol)); // query parameter
            if (from != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "from", from)); // query parameter
            if (to != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "to", to)); // query parameter
            if (status != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "status", status)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetOrders", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<OrderSummary>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<OrderSummary>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<OrderSummary>)));
        }

        /// <summary>
        /// Get a list orders Returns live and historic orders, defaulting to live orders. Returns at most 100 results, use timestamp to paginate for further results
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Only return results for this symbol (optional)</param>
        /// <param name="from">Epoch timestamp in ms (optional)</param>
        /// <param name="to">Epoch timestamp in ms (optional)</param>
        /// <param name="status">Order Status (optional)</param>
        /// <param name="limit">Maximum amount of results to return in a single call. If omitted, 100 results are returned by default.  (optional)</param>
        /// <returns>Task of List&lt;OrderSummary&gt;</returns>
        public async System.Threading.Tasks.Task<List<OrderSummary>> GetOrdersAsync (string symbol = default(string), long? from = default(long?), long? to = default(long?), OrderStatus? status = default(OrderStatus?), int? limit = default(int?))
        {
             ApiResponse<List<OrderSummary>> localVarResponse = await GetOrdersAsyncWithHttpInfo(symbol, from, to, status, limit);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a list orders Returns live and historic orders, defaulting to live orders. Returns at most 100 results, use timestamp to paginate for further results
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Only return results for this symbol (optional)</param>
        /// <param name="from">Epoch timestamp in ms (optional)</param>
        /// <param name="to">Epoch timestamp in ms (optional)</param>
        /// <param name="status">Order Status (optional)</param>
        /// <param name="limit">Maximum amount of results to return in a single call. If omitted, 100 results are returned by default.  (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;OrderSummary&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<OrderSummary>>> GetOrdersAsyncWithHttpInfo (string symbol = default(string), long? from = default(long?), long? to = default(long?), OrderStatus? status = default(OrderStatus?), int? limit = default(int?))
        {

            var localVarPath = "/orders";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (symbol != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "symbol", symbol)); // query parameter
            if (from != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "from", from)); // query parameter
            if (to != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "to", to)); // query parameter
            if (status != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "status", status)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarHeaderParams["X-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetOrders", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<OrderSummary>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<OrderSummary>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<OrderSummary>)));
        }

    }
}
