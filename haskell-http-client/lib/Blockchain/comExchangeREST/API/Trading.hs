{-
   Blockchain.com Exchange REST API

   ## Introduction Welcome to Blockchain.com's Exchange API and developer documentation. \\ These documents detail and give examples of various functionality offered by the API such as receiving real time market data, requesting balance information and performing trades. ## To Get Started Create or log into your existing Blockchain.com Exchange account \\ Select API from the drop down menu \\ Fill out form and click “Create New API Key Now” \\ Once generated you can view your keys under API Settings. \\ Please be aware that the API key can only be used once it was verified via email.  The API key must be set via the \\ `X-API-Token`\\ header.  The base URL to be used for all calls is \\ `https://api.blockchain.com/v3/exchange`  Autogenerated clients for this API can be found [here](https://github.com/blockchain/lib-exchange-client). 

   OpenAPI Version: 3.0.0
   Blockchain.com Exchange REST API API version: 1.0.0
   Generated by OpenAPI Generator (https://openapi-generator.tech)
-}

{-|
Module : Blockchain.comExchangeREST.API.Trading
-}

{-# LANGUAGE FlexibleContexts #-}
{-# LANGUAGE FlexibleInstances #-}
{-# LANGUAGE MonoLocalBinds #-}
{-# LANGUAGE MultiParamTypeClasses #-}
{-# LANGUAGE OverloadedStrings #-}
{-# OPTIONS_GHC -fno-warn-name-shadowing -fno-warn-unused-binds -fno-warn-unused-imports #-}

module Blockchain.comExchangeREST.API.Trading where

import Blockchain.comExchangeREST.Core
import Blockchain.comExchangeREST.MimeTypes
import Blockchain.comExchangeREST.Model as M

import qualified Data.Aeson as A
import qualified Data.ByteString as B
import qualified Data.ByteString.Lazy as BL
import qualified Data.Data as P (Typeable, TypeRep, typeOf, typeRep)
import qualified Data.Foldable as P
import qualified Data.Map as Map
import qualified Data.Maybe as P
import qualified Data.Proxy as P (Proxy(..))
import qualified Data.Set as Set
import qualified Data.String as P
import qualified Data.Text as T
import qualified Data.Text.Encoding as T
import qualified Data.Text.Lazy as TL
import qualified Data.Text.Lazy.Encoding as TL
import qualified Data.Time as TI
import qualified Network.HTTP.Client.MultipartFormData as NH
import qualified Network.HTTP.Media as ME
import qualified Network.HTTP.Types as NH
import qualified Web.FormUrlEncoded as WH
import qualified Web.HttpApiData as WH

import Data.Text (Text)
import GHC.Base ((<|>))

import Prelude ((==),(/=),($), (.),(<$>),(<*>),(>>=),Maybe(..),Bool(..),Char,Double,FilePath,Float,Int,Integer,String,fmap,undefined,mempty,maybe,pure,Monad,Applicative,Functor)
import qualified Prelude as P

-- * Operations


-- ** Trading

-- *** createOrder

-- | @POST \/orders@
-- 
-- Add an order
-- 
-- AuthMethod: 'AuthApiKeyApiKeyAuth'
-- 
createOrder 
  :: (Consumes CreateOrder MimeJSON, MimeRender MimeJSON BaseOrder)
  => BaseOrder -- ^ "baseOrder" -  Trade
  -> comExchangeRESTRequest CreateOrder MimeJSON OrderSummary MimeJSON
createOrder baseOrder =
  _mkRequest "POST" ["/orders"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKeyAuth)
    `setBodyParam` baseOrder

data CreateOrder 

-- | /Body Param/ "BaseOrder" - Trade
instance HasBodyParam CreateOrder BaseOrder 

-- | @application/json@
instance Consumes CreateOrder MimeJSON

-- | @application/json@
instance Produces CreateOrder MimeJSON


-- *** deleteAllOrders

-- | @DELETE \/orders@
-- 
-- Delete all open orders (of a symbol, if specified)
-- 
-- AuthMethod: 'AuthApiKeyApiKeyAuth'
-- 
deleteAllOrders 
  :: comExchangeRESTRequest DeleteAllOrders MimeNoContent NoContent MimeNoContent
deleteAllOrders =
  _mkRequest "DELETE" ["/orders"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKeyAuth)

data DeleteAllOrders  
instance HasOptionalParam DeleteAllOrders Symbol2 where
  applyOptionalParam req (Symbol2 xs) =
    req `setQuery` toQuery ("symbol", Just xs)
instance Produces DeleteAllOrders MimeNoContent


-- *** deleteOrder

-- | @DELETE \/orders\/{orderId}@
-- 
-- Cancel a trade
-- 
-- AuthMethod: 'AuthApiKeyApiKeyAuth'
-- 
deleteOrder 
  :: OrderId -- ^ "orderId" -  Order ID
  -> comExchangeRESTRequest DeleteOrder MimeNoContent NoContent MimeNoContent
deleteOrder (OrderId orderId) =
  _mkRequest "DELETE" ["/orders/",toPath orderId]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKeyAuth)

data DeleteOrder  
instance Produces DeleteOrder MimeNoContent


-- *** getFees

-- | @GET \/fees@
-- 
-- Get current fee level
-- 
-- AuthMethod: 'AuthApiKeyApiKeyAuth'
-- 
getFees 
  :: comExchangeRESTRequest GetFees MimeNoContent Fees MimeJSON
getFees =
  _mkRequest "GET" ["/fees"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKeyAuth)

data GetFees  
-- | @application/json@
instance Produces GetFees MimeJSON


-- *** getOrderById

-- | @GET \/orders\/{orderId}@
-- 
-- Get a specific order
-- 
-- AuthMethod: 'AuthApiKeyApiKeyAuth'
-- 
getOrderById 
  :: OrderId -- ^ "orderId" -  Order ID
  -> comExchangeRESTRequest GetOrderById MimeNoContent OrderSummary MimeJSON
getOrderById (OrderId orderId) =
  _mkRequest "GET" ["/orders/",toPath orderId]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKeyAuth)

data GetOrderById  
-- | @application/json@
instance Produces GetOrderById MimeJSON


-- *** getOrders

-- | @GET \/orders@
-- 
-- Get a list orders
-- 
-- Returns live and historic orders, defaulting to live orders. Returns at most 100 results, use timestamp to paginate for further results
-- 
-- AuthMethod: 'AuthApiKeyApiKeyAuth'
-- 
getOrders 
  :: comExchangeRESTRequest GetOrders MimeNoContent [OrderSummary] MimeJSON
getOrders =
  _mkRequest "GET" ["/orders"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKeyAuth)

data GetOrders  

-- | /Optional Param/ "symbol" - Only return results for this symbol
instance HasOptionalParam GetOrders Symbol2 where
  applyOptionalParam req (Symbol2 xs) =
    req `setQuery` toQuery ("symbol", Just xs)

-- | /Optional Param/ "from" - Epoch timestamp in ms
instance HasOptionalParam GetOrders From where
  applyOptionalParam req (From xs) =
    req `setQuery` toQuery ("from", Just xs)

-- | /Optional Param/ "to" - Epoch timestamp in ms
instance HasOptionalParam GetOrders To where
  applyOptionalParam req (To xs) =
    req `setQuery` toQuery ("to", Just xs)

-- | /Optional Param/ "status" - Order Status
instance HasOptionalParam GetOrders  where
  applyOptionalParam req ( xs) =
    req `setQuery` toQuery ("status", Just xs)

-- | /Optional Param/ "limit" - Maximum amount of results to return in a single call. If omitted, 100 results are returned by default. 
instance HasOptionalParam GetOrders Limit where
  applyOptionalParam req (Limit xs) =
    req `setQuery` toQuery ("limit", Just xs)
-- | @application/json@
instance Produces GetOrders MimeJSON

