{-
   Blockchain.com Exchange REST API

   ## Introduction Welcome to Blockchain.com's Exchange API and developer documentation. These documents detail and give examples of various functionality offered by the API such as receiving real time market data, requesting balance information and performing trades. ## To Get Started Create or log into your existing Blockchain.com Exchange account Select API from the drop down menu Fill out form and click “Create New API Key Now” Once generated you can view your keys under API Settings 

   OpenAPI Version: 3.0.0
   Blockchain.com Exchange REST API API version: 1.0.0
   Generated by OpenAPI Generator (https://openapi-generator.tech)
-}

{-|
Module : Blockchain.comExchangeREST.API.Unauthenticated
-}

{-# LANGUAGE FlexibleContexts #-}
{-# LANGUAGE FlexibleInstances #-}
{-# LANGUAGE MonoLocalBinds #-}
{-# LANGUAGE MultiParamTypeClasses #-}
{-# LANGUAGE OverloadedStrings #-}
{-# OPTIONS_GHC -fno-warn-name-shadowing -fno-warn-unused-binds -fno-warn-unused-imports #-}

module Blockchain.comExchangeREST.API.Unauthenticated where

import Blockchain.comExchangeREST.Core
import Blockchain.comExchangeREST.MimeTypes
import Blockchain.comExchangeREST.Model as M

import qualified Data.Aeson as A
import qualified Data.ByteString as B
import qualified Data.ByteString.Lazy as BL
import qualified Data.Data as P (Typeable, TypeRep, typeOf, typeRep)
import qualified Data.Foldable as P
import qualified Data.Map as Map
import qualified Data.Maybe as P
import qualified Data.Proxy as P (Proxy(..))
import qualified Data.Set as Set
import qualified Data.String as P
import qualified Data.Text as T
import qualified Data.Text.Encoding as T
import qualified Data.Text.Lazy as TL
import qualified Data.Text.Lazy.Encoding as TL
import qualified Data.Time as TI
import qualified Network.HTTP.Client.MultipartFormData as NH
import qualified Network.HTTP.Media as ME
import qualified Network.HTTP.Types as NH
import qualified Web.FormUrlEncoded as WH
import qualified Web.HttpApiData as WH

import Data.Text (Text)
import GHC.Base ((<|>))

import Prelude ((==),(/=),($), (.),(<$>),(<*>),(>>=),Maybe(..),Bool(..),Char,Double,FilePath,Float,Int,Integer,String,fmap,undefined,mempty,maybe,pure,Monad,Applicative,Functor)
import qualified Prelude as P

-- * Operations


-- ** Unauthenticated

-- *** getL2OrderBook

-- | @GET \/l2\/{symbol}@
-- 
-- L2 Order Book
-- 
-- Level 2 Order Book data is available through the l2 channel. Each entry in bids and asks arrays is a price level, along with its price (px), quantity (qty) and number of orders (num) attributes.
-- 
-- AuthMethod: 'AuthApiKeyApiKeyAuth'
-- 
getL2OrderBook 
  :: Symbol2 -- ^ "symbol" -  Symbol
  -> comExchangeRESTRequest GetL2OrderBook MimeNoContent OrderBook MimeJSON
getL2OrderBook (Symbol2 symbol) =
  _mkRequest "GET" ["/l2/",toPath symbol]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKeyAuth)

data GetL2OrderBook  
-- | @application/json@
instance Produces GetL2OrderBook MimeJSON


-- *** getL3OrderBook

-- | @GET \/l3\/{symbol}@
-- 
-- L3 Order Book
-- 
-- Level 3 Order Book data is available through the l3 channel. Each entry in bids and asks arrays is an order, along with its id (id), price (px) and quantity (qty) attributes.
-- 
-- AuthMethod: 'AuthApiKeyApiKeyAuth'
-- 
getL3OrderBook 
  :: Symbol2 -- ^ "symbol" -  Symbol
  -> comExchangeRESTRequest GetL3OrderBook MimeNoContent OrderBook MimeJSON
getL3OrderBook (Symbol2 symbol) =
  _mkRequest "GET" ["/l3/",toPath symbol]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKeyAuth)

data GetL3OrderBook  
-- | @application/json@
instance Produces GetL3OrderBook MimeJSON


-- *** getSymbolByName

-- | @GET \/symbols\/{symbol}@
-- 
-- Symbols
-- 
-- When the symbol is not halted the auction data in the message may be blank. When a symbol is in a halt state the auction data will populate as the book builds. When an opening time has been chosen, the auction-time field will show the opening time. Subsequent updates will be sent only if the symbol status changes in any way.
-- 
-- AuthMethod: 'AuthApiKeyApiKeyAuth'
-- 
getSymbolByName 
  :: Symbol2 -- ^ "symbol" -  Symbol
  -> comExchangeRESTRequest GetSymbolByName MimeNoContent SymbolStatus MimeJSON
getSymbolByName (Symbol2 symbol) =
  _mkRequest "GET" ["/symbols/",toPath symbol]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKeyAuth)

data GetSymbolByName  
-- | @application/json@
instance Produces GetSymbolByName MimeJSON


-- *** getSymbols

-- | @GET \/symbols@
-- 
-- Symbols
-- 
-- When the symbol is not halted the auction data in the message may be blank. When a symbol is in a halt state the auction data will populate as the book builds. When an opening time has been chosen, the auction-time field will show the opening time. Subsequent updates will be sent only if the symbol status changes in any way.
-- 
-- AuthMethod: 'AuthApiKeyApiKeyAuth'
-- 
getSymbols 
  :: comExchangeRESTRequest GetSymbols MimeNoContent ((Map.Map String SymbolStatus)) MimeJSON
getSymbols =
  _mkRequest "GET" ["/symbols"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKeyAuth)

data GetSymbols  
-- | @application/json@
instance Produces GetSymbols MimeJSON


-- *** getTickerBySymbol

-- | @GET \/tickers\/{symbol}@
-- 
-- Price
-- 
-- AuthMethod: 'AuthApiKeyApiKeyAuth'
-- 
getTickerBySymbol 
  :: Symbol2 -- ^ "symbol" -  Symbol
  -> comExchangeRESTRequest GetTickerBySymbol MimeNoContent PriceEvent MimeJSON
getTickerBySymbol (Symbol2 symbol) =
  _mkRequest "GET" ["/tickers/",toPath symbol]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKeyAuth)

data GetTickerBySymbol  
-- | @application/json@
instance Produces GetTickerBySymbol MimeJSON


-- *** getTickers

-- | @GET \/tickers@
-- 
-- Price
-- 
-- AuthMethod: 'AuthApiKeyApiKeyAuth'
-- 
getTickers 
  :: comExchangeRESTRequest GetTickers MimeNoContent [PriceEvent] MimeJSON
getTickers =
  _mkRequest "GET" ["/tickers"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKeyAuth)

data GetTickers  
-- | @application/json@
instance Produces GetTickers MimeJSON

