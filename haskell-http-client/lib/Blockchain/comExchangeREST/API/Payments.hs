{-
   Blockchain.com Exchange REST API

   ## Introduction Welcome to Blockchain.com's Exchange API and developer documentation. These documents detail and give examples of various functionality offered by the API such as receiving real time market data, requesting balance information and performing trades. ## To Get Started Create or log into your existing Blockchain.com Exchange account Select API from the drop down menu Fill out form and click “Create New API Key Now” Once generated you can view your keys under API Settings 

   OpenAPI Version: 3.0.0
   Blockchain.com Exchange REST API API version: 1.0.0
   Generated by OpenAPI Generator (https://openapi-generator.tech)
-}

{-|
Module : Blockchain.comExchangeREST.API.Payments
-}

{-# LANGUAGE FlexibleContexts #-}
{-# LANGUAGE FlexibleInstances #-}
{-# LANGUAGE MonoLocalBinds #-}
{-# LANGUAGE MultiParamTypeClasses #-}
{-# LANGUAGE OverloadedStrings #-}
{-# OPTIONS_GHC -fno-warn-name-shadowing -fno-warn-unused-binds -fno-warn-unused-imports #-}

module Blockchain.comExchangeREST.API.Payments where

import Blockchain.comExchangeREST.Core
import Blockchain.comExchangeREST.MimeTypes
import Blockchain.comExchangeREST.Model as M

import qualified Data.Aeson as A
import qualified Data.ByteString as B
import qualified Data.ByteString.Lazy as BL
import qualified Data.Data as P (Typeable, TypeRep, typeOf, typeRep)
import qualified Data.Foldable as P
import qualified Data.Map as Map
import qualified Data.Maybe as P
import qualified Data.Proxy as P (Proxy(..))
import qualified Data.Set as Set
import qualified Data.String as P
import qualified Data.Text as T
import qualified Data.Text.Encoding as T
import qualified Data.Text.Lazy as TL
import qualified Data.Text.Lazy.Encoding as TL
import qualified Data.Time as TI
import qualified Network.HTTP.Client.MultipartFormData as NH
import qualified Network.HTTP.Media as ME
import qualified Network.HTTP.Types as NH
import qualified Web.FormUrlEncoded as WH
import qualified Web.HttpApiData as WH

import Data.Text (Text)
import GHC.Base ((<|>))

import Prelude ((==),(/=),($), (.),(<$>),(<*>),(>>=),Maybe(..),Bool(..),Char,Double,FilePath,Float,Int,Integer,String,fmap,undefined,mempty,maybe,pure,Monad,Applicative,Functor)
import qualified Prelude as P

-- * Operations


-- ** Payments

-- *** createWithdrawal

-- | @POST \/withdrawals@
-- 
-- Request a withdrawal
-- 
-- AuthMethod: 'AuthApiKeyApiKeyAuth'
-- 
createWithdrawal 
  :: (Consumes CreateWithdrawal MimeJSON, MimeRender MimeJSON CreateWithdrawalRequest)
  => CreateWithdrawalRequest -- ^ "createWithdrawalRequest"
  -> comExchangeRESTRequest CreateWithdrawal MimeJSON WithdrawalInfo MimeJSON
createWithdrawal createWithdrawalRequest =
  _mkRequest "POST" ["/withdrawals"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKeyAuth)
    `setBodyParam` createWithdrawalRequest

data CreateWithdrawal 
instance HasBodyParam CreateWithdrawal CreateWithdrawalRequest 

-- | @application/json@
instance Consumes CreateWithdrawal MimeJSON

-- | @application/json@
instance Produces CreateWithdrawal MimeJSON


-- *** getAccountByTypeAndCurrency

-- | @GET \/accounts\/{account}\/{currency}@
-- 
-- Receive current account balances
-- 
-- AuthMethod: 'AuthApiKeyApiKeyAuth'
-- 
getAccountByTypeAndCurrency 
  :: Account -- ^ "account" -  Account
  -> Currency2 -- ^ "currency" -  Currency
  -> comExchangeRESTRequest GetAccountByTypeAndCurrency MimeNoContent Balance MimeJSON
getAccountByTypeAndCurrency (Account account) (Currency2 currency) =
  _mkRequest "GET" ["/accounts/",toPath account,"/",toPath currency]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKeyAuth)

data GetAccountByTypeAndCurrency  
-- | @application/json@
instance Produces GetAccountByTypeAndCurrency MimeJSON


-- *** getAccounts

-- | @GET \/accounts@
-- 
-- Receive current account balances
-- 
-- AuthMethod: 'AuthApiKeyApiKeyAuth'
-- 
getAccounts 
  :: comExchangeRESTRequest GetAccounts MimeNoContent BalanceMap MimeJSON
getAccounts =
  _mkRequest "GET" ["/accounts"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKeyAuth)

data GetAccounts  
-- | @application/json@
instance Produces GetAccounts MimeJSON


-- *** getDepositAddress

-- | @POST \/deposits\/{currency}@
-- 
-- Get a deposit address. Currently only crypto currencies are supported
-- 
-- AuthMethod: 'AuthApiKeyApiKeyAuth'
-- 
getDepositAddress 
  :: Currency2 -- ^ "currency" -  Currency
  -> comExchangeRESTRequest GetDepositAddress MimeNoContent DepositAddressCrypto MimeJSON
getDepositAddress (Currency2 currency) =
  _mkRequest "POST" ["/deposits/",toPath currency]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKeyAuth)

data GetDepositAddress  
-- | @application/json@
instance Produces GetDepositAddress MimeJSON


-- *** getDepositById

-- | @GET \/deposits\/{depositId}@
-- 
-- Get status about a deposit
-- 
-- AuthMethod: 'AuthApiKeyApiKeyAuth'
-- 
getDepositById 
  :: DepositId2 -- ^ "depositId" -  Deposit ID
  -> comExchangeRESTRequest GetDepositById MimeNoContent DepositInfo MimeJSON
getDepositById (DepositId2 depositId) =
  _mkRequest "GET" ["/deposits/",toPath depositId]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKeyAuth)

data GetDepositById  
-- | @application/json@
instance Produces GetDepositById MimeJSON


-- *** getDeposits

-- | @GET \/deposits@
-- 
-- Get a list of deposits
-- 
-- AuthMethod: 'AuthApiKeyApiKeyAuth'
-- 
getDeposits 
  :: comExchangeRESTRequest GetDeposits MimeNoContent [DepositInfo] MimeJSON
getDeposits =
  _mkRequest "GET" ["/deposits"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKeyAuth)

data GetDeposits  

-- | /Optional Param/ "from" - Epoch timestamp in ms
instance HasOptionalParam GetDeposits From where
  applyOptionalParam req (From xs) =
    req `setQuery` toQuery ("from", Just xs)

-- | /Optional Param/ "to" - Epoch timestamp in ms
instance HasOptionalParam GetDeposits To where
  applyOptionalParam req (To xs) =
    req `setQuery` toQuery ("to", Just xs)
-- | @application/json@
instance Produces GetDeposits MimeJSON


-- *** getWhitelist

-- | @GET \/whitelist@
-- 
-- Get a list of all whitelisted withdrawal accounts
-- 
-- AuthMethod: 'AuthApiKeyApiKeyAuth'
-- 
getWhitelist 
  :: comExchangeRESTRequest GetWhitelist MimeNoContent [WhitelistEntry] MimeJSON
getWhitelist =
  _mkRequest "GET" ["/whitelist"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKeyAuth)

data GetWhitelist  
-- | @application/json@
instance Produces GetWhitelist MimeJSON


-- *** getWhitelistByCurrency

-- | @GET \/whitelist\/{currency}@
-- 
-- Get a list of all whitelisted withdrawal accounts
-- 
-- AuthMethod: 'AuthApiKeyApiKeyAuth'
-- 
getWhitelistByCurrency 
  :: Currency2 -- ^ "currency" -  Currency
  -> comExchangeRESTRequest GetWhitelistByCurrency MimeNoContent [WhitelistEntry] MimeJSON
getWhitelistByCurrency (Currency2 currency) =
  _mkRequest "GET" ["/whitelist/",toPath currency]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKeyAuth)

data GetWhitelistByCurrency  
-- | @application/json@
instance Produces GetWhitelistByCurrency MimeJSON


-- *** getWithdrawalById

-- | @GET \/withdrawals\/{withdrawalId}@
-- 
-- Get status about a withdrawal
-- 
-- AuthMethod: 'AuthApiKeyApiKeyAuth'
-- 
getWithdrawalById 
  :: WithdrawalId2 -- ^ "withdrawalId" -  Withdrawal ID
  -> comExchangeRESTRequest GetWithdrawalById MimeNoContent WithdrawalInfo MimeJSON
getWithdrawalById (WithdrawalId2 withdrawalId) =
  _mkRequest "GET" ["/withdrawals/",toPath withdrawalId]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKeyAuth)

data GetWithdrawalById  
-- | @application/json@
instance Produces GetWithdrawalById MimeJSON


-- *** getWithdrawals

-- | @GET \/withdrawals@
-- 
-- Get a list of withdrawals
-- 
-- AuthMethod: 'AuthApiKeyApiKeyAuth'
-- 
getWithdrawals 
  :: comExchangeRESTRequest GetWithdrawals MimeNoContent [WithdrawalInfo] MimeJSON
getWithdrawals =
  _mkRequest "GET" ["/withdrawals"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKeyAuth)

data GetWithdrawals  

-- | /Optional Param/ "from" - Epoch timestamp in ms
instance HasOptionalParam GetWithdrawals From where
  applyOptionalParam req (From xs) =
    req `setQuery` toQuery ("from", Just xs)

-- | /Optional Param/ "to" - Epoch timestamp in ms
instance HasOptionalParam GetWithdrawals To where
  applyOptionalParam req (To xs) =
    req `setQuery` toQuery ("to", Just xs)
-- | @application/json@
instance Produces GetWithdrawals MimeJSON

