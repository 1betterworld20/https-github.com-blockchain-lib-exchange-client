{-
   Blockchain.com Exchange REST API

   ## Introduction Welcome to Blockchain.com's Exchange API and developer documentation. These documents detail and give examples of various functionality offered by the API such as receiving real time market data, requesting balance information and performing trades. ## To Get Started Create or log into your existing Blockchain.com Exchange account Select API from the drop down menu Fill out form and click “Create New API Key Now” Once generated you can view your keys under API Settings 

   OpenAPI Version: 3.0.0
   Blockchain.com Exchange REST API API version: 1.0.0
   Generated by OpenAPI Generator (https://openapi-generator.tech)
-}

{-|
Module : Blockchain.comExchangeREST.Lens
-}

{-# LANGUAGE KindSignatures #-}
{-# LANGUAGE NamedFieldPuns #-}
{-# LANGUAGE RankNTypes #-}
{-# LANGUAGE RecordWildCards #-}
{-# OPTIONS_GHC -fno-warn-name-shadowing -fno-warn-unused-matches -fno-warn-unused-binds -fno-warn-unused-imports #-}

module Blockchain.comExchangeREST.ModelLens where

import qualified Data.Aeson as A
import qualified Data.ByteString.Lazy as BL
import qualified Data.Data as P (Data, Typeable)
import qualified Data.Map as Map
import qualified Data.Set as Set
import qualified Data.Time as TI

import Data.Text (Text)

import Prelude (($), (.),(<$>),(<*>),(=<<),Maybe(..),Bool(..),Char,Double,FilePath,Float,Int,Integer,String,fmap,undefined,mempty,maybe,pure,Monad,Applicative,Functor)
import qualified Prelude as P

import Blockchain.comExchangeREST.Model
import Blockchain.comExchangeREST.Core


-- * Balance

-- | 'balanceCurrency' Lens
balanceCurrencyL :: Lens_' Balance (Text)
balanceCurrencyL f Balance{..} = (\balanceCurrency -> Balance { balanceCurrency, ..} ) <$> f balanceCurrency
{-# INLINE balanceCurrencyL #-}

-- | 'balanceBalance' Lens
balanceBalanceL :: Lens_' Balance (Double)
balanceBalanceL f Balance{..} = (\balanceBalance -> Balance { balanceBalance, ..} ) <$> f balanceBalance
{-# INLINE balanceBalanceL #-}

-- | 'balanceAvailable' Lens
balanceAvailableL :: Lens_' Balance (Double)
balanceAvailableL f Balance{..} = (\balanceAvailable -> Balance { balanceAvailable, ..} ) <$> f balanceAvailable
{-# INLINE balanceAvailableL #-}

-- | 'balanceBalanceLocal' Lens
balanceBalanceLocalL :: Lens_' Balance (Double)
balanceBalanceLocalL f Balance{..} = (\balanceBalanceLocal -> Balance { balanceBalanceLocal, ..} ) <$> f balanceBalanceLocal
{-# INLINE balanceBalanceLocalL #-}

-- | 'balanceAvailableLocal' Lens
balanceAvailableLocalL :: Lens_' Balance (Double)
balanceAvailableLocalL f Balance{..} = (\balanceAvailableLocal -> Balance { balanceAvailableLocal, ..} ) <$> f balanceAvailableLocal
{-# INLINE balanceAvailableLocalL #-}

-- | 'balanceRate' Lens
balanceRateL :: Lens_' Balance (Double)
balanceRateL f Balance{..} = (\balanceRate -> Balance { balanceRate, ..} ) <$> f balanceRate
{-# INLINE balanceRateL #-}



-- * BalanceMap

-- | 'balanceMapPrimary' Lens
balanceMapPrimaryL :: Lens_' BalanceMap ([Balance])
balanceMapPrimaryL f BalanceMap{..} = (\balanceMapPrimary -> BalanceMap { balanceMapPrimary, ..} ) <$> f balanceMapPrimary
{-# INLINE balanceMapPrimaryL #-}



-- * BaseOrder

-- | 'baseOrderOrdType' Lens
baseOrderOrdTypeL :: Lens_' BaseOrder (Maybe E'OrdType)
baseOrderOrdTypeL f BaseOrder{..} = (\baseOrderOrdType -> BaseOrder { baseOrderOrdType, ..} ) <$> f baseOrderOrdType
{-# INLINE baseOrderOrdTypeL #-}

-- | 'baseOrderClOrdId' Lens
baseOrderClOrdIdL :: Lens_' BaseOrder (Text)
baseOrderClOrdIdL f BaseOrder{..} = (\baseOrderClOrdId -> BaseOrder { baseOrderClOrdId, ..} ) <$> f baseOrderClOrdId
{-# INLINE baseOrderClOrdIdL #-}

-- | 'baseOrderSymbol' Lens
baseOrderSymbolL :: Lens_' BaseOrder (Text)
baseOrderSymbolL f BaseOrder{..} = (\baseOrderSymbol -> BaseOrder { baseOrderSymbol, ..} ) <$> f baseOrderSymbol
{-# INLINE baseOrderSymbolL #-}

-- | 'baseOrderSide' Lens
baseOrderSideL :: Lens_' BaseOrder (Side)
baseOrderSideL f BaseOrder{..} = (\baseOrderSide -> BaseOrder { baseOrderSide, ..} ) <$> f baseOrderSide
{-# INLINE baseOrderSideL #-}

-- | 'baseOrderOrderQty' Lens
baseOrderOrderQtyL :: Lens_' BaseOrder (Double)
baseOrderOrderQtyL f BaseOrder{..} = (\baseOrderOrderQty -> BaseOrder { baseOrderOrderQty, ..} ) <$> f baseOrderOrderQty
{-# INLINE baseOrderOrderQtyL #-}

-- | 'baseOrderTimeInForce' Lens
baseOrderTimeInForceL :: Lens_' BaseOrder (Maybe TimeInForce)
baseOrderTimeInForceL f BaseOrder{..} = (\baseOrderTimeInForce -> BaseOrder { baseOrderTimeInForce, ..} ) <$> f baseOrderTimeInForce
{-# INLINE baseOrderTimeInForceL #-}

-- | 'baseOrderPrice' Lens
baseOrderPriceL :: Lens_' BaseOrder (Maybe Double)
baseOrderPriceL f BaseOrder{..} = (\baseOrderPrice -> BaseOrder { baseOrderPrice, ..} ) <$> f baseOrderPrice
{-# INLINE baseOrderPriceL #-}

-- | 'baseOrderExpireDate' Lens
baseOrderExpireDateL :: Lens_' BaseOrder (Maybe Int)
baseOrderExpireDateL f BaseOrder{..} = (\baseOrderExpireDate -> BaseOrder { baseOrderExpireDate, ..} ) <$> f baseOrderExpireDate
{-# INLINE baseOrderExpireDateL #-}

-- | 'baseOrderMinQty' Lens
baseOrderMinQtyL :: Lens_' BaseOrder (Maybe Double)
baseOrderMinQtyL f BaseOrder{..} = (\baseOrderMinQty -> BaseOrder { baseOrderMinQty, ..} ) <$> f baseOrderMinQty
{-# INLINE baseOrderMinQtyL #-}

-- | 'baseOrderStopPx' Lens
baseOrderStopPxL :: Lens_' BaseOrder (Maybe Double)
baseOrderStopPxL f BaseOrder{..} = (\baseOrderStopPx -> BaseOrder { baseOrderStopPx, ..} ) <$> f baseOrderStopPx
{-# INLINE baseOrderStopPxL #-}



-- * CancelOrderRequest

-- | 'cancelOrderRequestAction' Lens
cancelOrderRequestActionL :: Lens_' CancelOrderRequest (E'Action)
cancelOrderRequestActionL f CancelOrderRequest{..} = (\cancelOrderRequestAction -> CancelOrderRequest { cancelOrderRequestAction, ..} ) <$> f cancelOrderRequestAction
{-# INLINE cancelOrderRequestActionL #-}

-- | 'cancelOrderRequestOrderId' Lens
cancelOrderRequestOrderIdL :: Lens_' CancelOrderRequest (Integer)
cancelOrderRequestOrderIdL f CancelOrderRequest{..} = (\cancelOrderRequestOrderId -> CancelOrderRequest { cancelOrderRequestOrderId, ..} ) <$> f cancelOrderRequestOrderId
{-# INLINE cancelOrderRequestOrderIdL #-}



-- * CreateWithdrawalRequest

-- | 'createWithdrawalRequestAmount' Lens
createWithdrawalRequestAmountL :: Lens_' CreateWithdrawalRequest (Maybe Double)
createWithdrawalRequestAmountL f CreateWithdrawalRequest{..} = (\createWithdrawalRequestAmount -> CreateWithdrawalRequest { createWithdrawalRequestAmount, ..} ) <$> f createWithdrawalRequestAmount
{-# INLINE createWithdrawalRequestAmountL #-}

-- | 'createWithdrawalRequestCurrency' Lens
createWithdrawalRequestCurrencyL :: Lens_' CreateWithdrawalRequest (Text)
createWithdrawalRequestCurrencyL f CreateWithdrawalRequest{..} = (\createWithdrawalRequestCurrency -> CreateWithdrawalRequest { createWithdrawalRequestCurrency, ..} ) <$> f createWithdrawalRequestCurrency
{-# INLINE createWithdrawalRequestCurrencyL #-}

-- | 'createWithdrawalRequestBeneficiary' Lens
createWithdrawalRequestBeneficiaryL :: Lens_' CreateWithdrawalRequest (Text)
createWithdrawalRequestBeneficiaryL f CreateWithdrawalRequest{..} = (\createWithdrawalRequestBeneficiary -> CreateWithdrawalRequest { createWithdrawalRequestBeneficiary, ..} ) <$> f createWithdrawalRequestBeneficiary
{-# INLINE createWithdrawalRequestBeneficiaryL #-}

-- | 'createWithdrawalRequestSendMax' Lens
createWithdrawalRequestSendMaxL :: Lens_' CreateWithdrawalRequest (Maybe Bool)
createWithdrawalRequestSendMaxL f CreateWithdrawalRequest{..} = (\createWithdrawalRequestSendMax -> CreateWithdrawalRequest { createWithdrawalRequestSendMax, ..} ) <$> f createWithdrawalRequestSendMax
{-# INLINE createWithdrawalRequestSendMaxL #-}



-- * DepositAddressCrypto

-- | 'depositAddressCryptoType' Lens
depositAddressCryptoTypeL :: Lens_' DepositAddressCrypto (Text)
depositAddressCryptoTypeL f DepositAddressCrypto{..} = (\depositAddressCryptoType -> DepositAddressCrypto { depositAddressCryptoType, ..} ) <$> f depositAddressCryptoType
{-# INLINE depositAddressCryptoTypeL #-}

-- | 'depositAddressCryptoAddress' Lens
depositAddressCryptoAddressL :: Lens_' DepositAddressCrypto (Text)
depositAddressCryptoAddressL f DepositAddressCrypto{..} = (\depositAddressCryptoAddress -> DepositAddressCrypto { depositAddressCryptoAddress, ..} ) <$> f depositAddressCryptoAddress
{-# INLINE depositAddressCryptoAddressL #-}



-- * DepositInfo

-- | 'depositInfoDepositId' Lens
depositInfoDepositIdL :: Lens_' DepositInfo (Text)
depositInfoDepositIdL f DepositInfo{..} = (\depositInfoDepositId -> DepositInfo { depositInfoDepositId, ..} ) <$> f depositInfoDepositId
{-# INLINE depositInfoDepositIdL #-}

-- | 'depositInfoAmount' Lens
depositInfoAmountL :: Lens_' DepositInfo (Double)
depositInfoAmountL f DepositInfo{..} = (\depositInfoAmount -> DepositInfo { depositInfoAmount, ..} ) <$> f depositInfoAmount
{-# INLINE depositInfoAmountL #-}

-- | 'depositInfoCurrency' Lens
depositInfoCurrencyL :: Lens_' DepositInfo (Text)
depositInfoCurrencyL f DepositInfo{..} = (\depositInfoCurrency -> DepositInfo { depositInfoCurrency, ..} ) <$> f depositInfoCurrency
{-# INLINE depositInfoCurrencyL #-}

-- | 'depositInfoAddress' Lens
depositInfoAddressL :: Lens_' DepositInfo (Text)
depositInfoAddressL f DepositInfo{..} = (\depositInfoAddress -> DepositInfo { depositInfoAddress, ..} ) <$> f depositInfoAddress
{-# INLINE depositInfoAddressL #-}

-- | 'depositInfoTxHash' Lens
depositInfoTxHashL :: Lens_' DepositInfo (Maybe Text)
depositInfoTxHashL f DepositInfo{..} = (\depositInfoTxHash -> DepositInfo { depositInfoTxHash, ..} ) <$> f depositInfoTxHash
{-# INLINE depositInfoTxHashL #-}

-- | 'depositInfoState' Lens
depositInfoStateL :: Lens_' DepositInfo (E'State)
depositInfoStateL f DepositInfo{..} = (\depositInfoState -> DepositInfo { depositInfoState, ..} ) <$> f depositInfoState
{-# INLINE depositInfoStateL #-}

-- | 'depositInfoTimestamp' Lens
depositInfoTimestampL :: Lens_' DepositInfo (Maybe Integer)
depositInfoTimestampL f DepositInfo{..} = (\depositInfoTimestamp -> DepositInfo { depositInfoTimestamp, ..} ) <$> f depositInfoTimestamp
{-# INLINE depositInfoTimestampL #-}



-- * Fees

-- | 'feesMakerRate' Lens
feesMakerRateL :: Lens_' Fees (Double)
feesMakerRateL f Fees{..} = (\feesMakerRate -> Fees { feesMakerRate, ..} ) <$> f feesMakerRate
{-# INLINE feesMakerRateL #-}

-- | 'feesTakerRate' Lens
feesTakerRateL :: Lens_' Fees (Double)
feesTakerRateL f Fees{..} = (\feesTakerRate -> Fees { feesTakerRate, ..} ) <$> f feesTakerRate
{-# INLINE feesTakerRateL #-}

-- | 'feesVolumeInUsd' Lens
feesVolumeInUsdL :: Lens_' Fees (Double)
feesVolumeInUsdL f Fees{..} = (\feesVolumeInUsd -> Fees { feesVolumeInUsd, ..} ) <$> f feesVolumeInUsd
{-# INLINE feesVolumeInUsdL #-}



-- * OrderBook

-- | 'orderBookSymbol' Lens
orderBookSymbolL :: Lens_' OrderBook (Maybe Text)
orderBookSymbolL f OrderBook{..} = (\orderBookSymbol -> OrderBook { orderBookSymbol, ..} ) <$> f orderBookSymbol
{-# INLINE orderBookSymbolL #-}

-- | 'orderBookBids' Lens
orderBookBidsL :: Lens_' OrderBook (Maybe [OrderBookEntry])
orderBookBidsL f OrderBook{..} = (\orderBookBids -> OrderBook { orderBookBids, ..} ) <$> f orderBookBids
{-# INLINE orderBookBidsL #-}

-- | 'orderBookAsks' Lens
orderBookAsksL :: Lens_' OrderBook (Maybe [OrderBookEntry])
orderBookAsksL f OrderBook{..} = (\orderBookAsks -> OrderBook { orderBookAsks, ..} ) <$> f orderBookAsks
{-# INLINE orderBookAsksL #-}



-- * OrderBookEntry

-- | 'orderBookEntryPx' Lens
orderBookEntryPxL :: Lens_' OrderBookEntry (Maybe Double)
orderBookEntryPxL f OrderBookEntry{..} = (\orderBookEntryPx -> OrderBookEntry { orderBookEntryPx, ..} ) <$> f orderBookEntryPx
{-# INLINE orderBookEntryPxL #-}

-- | 'orderBookEntryQty' Lens
orderBookEntryQtyL :: Lens_' OrderBookEntry (Maybe Double)
orderBookEntryQtyL f OrderBookEntry{..} = (\orderBookEntryQty -> OrderBookEntry { orderBookEntryQty, ..} ) <$> f orderBookEntryQty
{-# INLINE orderBookEntryQtyL #-}

-- | 'orderBookEntryNum' Lens
orderBookEntryNumL :: Lens_' OrderBookEntry (Maybe Integer)
orderBookEntryNumL f OrderBookEntry{..} = (\orderBookEntryNum -> OrderBookEntry { orderBookEntryNum, ..} ) <$> f orderBookEntryNum
{-# INLINE orderBookEntryNumL #-}



-- * OrderStatus



-- * OrderSummary

-- | 'orderSummaryExOrdId' Lens
orderSummaryExOrdIdL :: Lens_' OrderSummary (Maybe Integer)
orderSummaryExOrdIdL f OrderSummary{..} = (\orderSummaryExOrdId -> OrderSummary { orderSummaryExOrdId, ..} ) <$> f orderSummaryExOrdId
{-# INLINE orderSummaryExOrdIdL #-}

-- | 'orderSummaryClOrdId' Lens
orderSummaryClOrdIdL :: Lens_' OrderSummary (Text)
orderSummaryClOrdIdL f OrderSummary{..} = (\orderSummaryClOrdId -> OrderSummary { orderSummaryClOrdId, ..} ) <$> f orderSummaryClOrdId
{-# INLINE orderSummaryClOrdIdL #-}

-- | 'orderSummaryOrdStatus' Lens
orderSummaryOrdStatusL :: Lens_' OrderSummary (OrderStatus)
orderSummaryOrdStatusL f OrderSummary{..} = (\orderSummaryOrdStatus -> OrderSummary { orderSummaryOrdStatus, ..} ) <$> f orderSummaryOrdStatus
{-# INLINE orderSummaryOrdStatusL #-}

-- | 'orderSummarySide' Lens
orderSummarySideL :: Lens_' OrderSummary (Side)
orderSummarySideL f OrderSummary{..} = (\orderSummarySide -> OrderSummary { orderSummarySide, ..} ) <$> f orderSummarySide
{-# INLINE orderSummarySideL #-}

-- | 'orderSummaryPrice' Lens
orderSummaryPriceL :: Lens_' OrderSummary (Maybe Double)
orderSummaryPriceL f OrderSummary{..} = (\orderSummaryPrice -> OrderSummary { orderSummaryPrice, ..} ) <$> f orderSummaryPrice
{-# INLINE orderSummaryPriceL #-}

-- | 'orderSummaryText' Lens
orderSummaryTextL :: Lens_' OrderSummary (Maybe Text)
orderSummaryTextL f OrderSummary{..} = (\orderSummaryText -> OrderSummary { orderSummaryText, ..} ) <$> f orderSummaryText
{-# INLINE orderSummaryTextL #-}

-- | 'orderSummarySymbol' Lens
orderSummarySymbolL :: Lens_' OrderSummary (Text)
orderSummarySymbolL f OrderSummary{..} = (\orderSummarySymbol -> OrderSummary { orderSummarySymbol, ..} ) <$> f orderSummarySymbol
{-# INLINE orderSummarySymbolL #-}

-- | 'orderSummaryLastShares' Lens
orderSummaryLastSharesL :: Lens_' OrderSummary (Maybe Double)
orderSummaryLastSharesL f OrderSummary{..} = (\orderSummaryLastShares -> OrderSummary { orderSummaryLastShares, ..} ) <$> f orderSummaryLastShares
{-# INLINE orderSummaryLastSharesL #-}

-- | 'orderSummaryLastPx' Lens
orderSummaryLastPxL :: Lens_' OrderSummary (Maybe Double)
orderSummaryLastPxL f OrderSummary{..} = (\orderSummaryLastPx -> OrderSummary { orderSummaryLastPx, ..} ) <$> f orderSummaryLastPx
{-# INLINE orderSummaryLastPxL #-}

-- | 'orderSummaryLeavesQty' Lens
orderSummaryLeavesQtyL :: Lens_' OrderSummary (Maybe Double)
orderSummaryLeavesQtyL f OrderSummary{..} = (\orderSummaryLeavesQty -> OrderSummary { orderSummaryLeavesQty, ..} ) <$> f orderSummaryLeavesQty
{-# INLINE orderSummaryLeavesQtyL #-}

-- | 'orderSummaryCumQty' Lens
orderSummaryCumQtyL :: Lens_' OrderSummary (Maybe Double)
orderSummaryCumQtyL f OrderSummary{..} = (\orderSummaryCumQty -> OrderSummary { orderSummaryCumQty, ..} ) <$> f orderSummaryCumQty
{-# INLINE orderSummaryCumQtyL #-}

-- | 'orderSummaryAvgPx' Lens
orderSummaryAvgPxL :: Lens_' OrderSummary (Maybe Double)
orderSummaryAvgPxL f OrderSummary{..} = (\orderSummaryAvgPx -> OrderSummary { orderSummaryAvgPx, ..} ) <$> f orderSummaryAvgPx
{-# INLINE orderSummaryAvgPxL #-}

-- | 'orderSummaryTimestamp' Lens
orderSummaryTimestampL :: Lens_' OrderSummary (Maybe Integer)
orderSummaryTimestampL f OrderSummary{..} = (\orderSummaryTimestamp -> OrderSummary { orderSummaryTimestamp, ..} ) <$> f orderSummaryTimestamp
{-# INLINE orderSummaryTimestampL #-}



-- * PriceEvent

-- | 'priceEventSymbol' Lens
priceEventSymbolL :: Lens_' PriceEvent (Maybe Text)
priceEventSymbolL f PriceEvent{..} = (\priceEventSymbol -> PriceEvent { priceEventSymbol, ..} ) <$> f priceEventSymbol
{-# INLINE priceEventSymbolL #-}

-- | 'priceEventPrice24h' Lens
priceEventPrice24hL :: Lens_' PriceEvent (Maybe Double)
priceEventPrice24hL f PriceEvent{..} = (\priceEventPrice24h -> PriceEvent { priceEventPrice24h, ..} ) <$> f priceEventPrice24h
{-# INLINE priceEventPrice24hL #-}

-- | 'priceEventVolume24h' Lens
priceEventVolume24hL :: Lens_' PriceEvent (Maybe Double)
priceEventVolume24hL f PriceEvent{..} = (\priceEventVolume24h -> PriceEvent { priceEventVolume24h, ..} ) <$> f priceEventVolume24h
{-# INLINE priceEventVolume24hL #-}

-- | 'priceEventLastTradePrice' Lens
priceEventLastTradePriceL :: Lens_' PriceEvent (Maybe Double)
priceEventLastTradePriceL f PriceEvent{..} = (\priceEventLastTradePrice -> PriceEvent { priceEventLastTradePrice, ..} ) <$> f priceEventLastTradePrice
{-# INLINE priceEventLastTradePriceL #-}



-- * PriceEventList

-- | 'priceEventListOrders' Lens
priceEventListOrdersL :: Lens_' PriceEventList (Maybe [PriceEvent])
priceEventListOrdersL f PriceEventList{..} = (\priceEventListOrders -> PriceEventList { priceEventListOrders, ..} ) <$> f priceEventListOrders
{-# INLINE priceEventListOrdersL #-}



-- * Side



-- * SymbolStatus

-- | 'symbolStatusBaseCurrency' Lens
symbolStatusBaseCurrencyL :: Lens_' SymbolStatus (Maybe Text)
symbolStatusBaseCurrencyL f SymbolStatus{..} = (\symbolStatusBaseCurrency -> SymbolStatus { symbolStatusBaseCurrency, ..} ) <$> f symbolStatusBaseCurrency
{-# INLINE symbolStatusBaseCurrencyL #-}

-- | 'symbolStatusBaseCurrencyScale' Lens
symbolStatusBaseCurrencyScaleL :: Lens_' SymbolStatus (Maybe Int)
symbolStatusBaseCurrencyScaleL f SymbolStatus{..} = (\symbolStatusBaseCurrencyScale -> SymbolStatus { symbolStatusBaseCurrencyScale, ..} ) <$> f symbolStatusBaseCurrencyScale
{-# INLINE symbolStatusBaseCurrencyScaleL #-}

-- | 'symbolStatusCounterCurrency' Lens
symbolStatusCounterCurrencyL :: Lens_' SymbolStatus (Maybe Text)
symbolStatusCounterCurrencyL f SymbolStatus{..} = (\symbolStatusCounterCurrency -> SymbolStatus { symbolStatusCounterCurrency, ..} ) <$> f symbolStatusCounterCurrency
{-# INLINE symbolStatusCounterCurrencyL #-}

-- | 'symbolStatusCounterCurrencyScale' Lens
symbolStatusCounterCurrencyScaleL :: Lens_' SymbolStatus (Maybe Int)
symbolStatusCounterCurrencyScaleL f SymbolStatus{..} = (\symbolStatusCounterCurrencyScale -> SymbolStatus { symbolStatusCounterCurrencyScale, ..} ) <$> f symbolStatusCounterCurrencyScale
{-# INLINE symbolStatusCounterCurrencyScaleL #-}

-- | 'symbolStatusMinPriceIncrement' Lens
symbolStatusMinPriceIncrementL :: Lens_' SymbolStatus (Maybe Integer)
symbolStatusMinPriceIncrementL f SymbolStatus{..} = (\symbolStatusMinPriceIncrement -> SymbolStatus { symbolStatusMinPriceIncrement, ..} ) <$> f symbolStatusMinPriceIncrement
{-# INLINE symbolStatusMinPriceIncrementL #-}

-- | 'symbolStatusMinPriceIncrementScale' Lens
symbolStatusMinPriceIncrementScaleL :: Lens_' SymbolStatus (Maybe Int)
symbolStatusMinPriceIncrementScaleL f SymbolStatus{..} = (\symbolStatusMinPriceIncrementScale -> SymbolStatus { symbolStatusMinPriceIncrementScale, ..} ) <$> f symbolStatusMinPriceIncrementScale
{-# INLINE symbolStatusMinPriceIncrementScaleL #-}

-- | 'symbolStatusMinOrderSize' Lens
symbolStatusMinOrderSizeL :: Lens_' SymbolStatus (Maybe Integer)
symbolStatusMinOrderSizeL f SymbolStatus{..} = (\symbolStatusMinOrderSize -> SymbolStatus { symbolStatusMinOrderSize, ..} ) <$> f symbolStatusMinOrderSize
{-# INLINE symbolStatusMinOrderSizeL #-}

-- | 'symbolStatusMinOrderSizeScale' Lens
symbolStatusMinOrderSizeScaleL :: Lens_' SymbolStatus (Maybe Int)
symbolStatusMinOrderSizeScaleL f SymbolStatus{..} = (\symbolStatusMinOrderSizeScale -> SymbolStatus { symbolStatusMinOrderSizeScale, ..} ) <$> f symbolStatusMinOrderSizeScale
{-# INLINE symbolStatusMinOrderSizeScaleL #-}

-- | 'symbolStatusMaxOrderSize' Lens
symbolStatusMaxOrderSizeL :: Lens_' SymbolStatus (Maybe Integer)
symbolStatusMaxOrderSizeL f SymbolStatus{..} = (\symbolStatusMaxOrderSize -> SymbolStatus { symbolStatusMaxOrderSize, ..} ) <$> f symbolStatusMaxOrderSize
{-# INLINE symbolStatusMaxOrderSizeL #-}

-- | 'symbolStatusMaxOrderSizeScale' Lens
symbolStatusMaxOrderSizeScaleL :: Lens_' SymbolStatus (Maybe Int)
symbolStatusMaxOrderSizeScaleL f SymbolStatus{..} = (\symbolStatusMaxOrderSizeScale -> SymbolStatus { symbolStatusMaxOrderSizeScale, ..} ) <$> f symbolStatusMaxOrderSizeScale
{-# INLINE symbolStatusMaxOrderSizeScaleL #-}

-- | 'symbolStatusLotSize' Lens
symbolStatusLotSizeL :: Lens_' SymbolStatus (Maybe Integer)
symbolStatusLotSizeL f SymbolStatus{..} = (\symbolStatusLotSize -> SymbolStatus { symbolStatusLotSize, ..} ) <$> f symbolStatusLotSize
{-# INLINE symbolStatusLotSizeL #-}

-- | 'symbolStatusLotSizeScale' Lens
symbolStatusLotSizeScaleL :: Lens_' SymbolStatus (Maybe Int)
symbolStatusLotSizeScaleL f SymbolStatus{..} = (\symbolStatusLotSizeScale -> SymbolStatus { symbolStatusLotSizeScale, ..} ) <$> f symbolStatusLotSizeScale
{-# INLINE symbolStatusLotSizeScaleL #-}

-- | 'symbolStatusStatus' Lens
symbolStatusStatusL :: Lens_' SymbolStatus (Maybe E'Status)
symbolStatusStatusL f SymbolStatus{..} = (\symbolStatusStatus -> SymbolStatus { symbolStatusStatus, ..} ) <$> f symbolStatusStatus
{-# INLINE symbolStatusStatusL #-}

-- | 'symbolStatusId' Lens
symbolStatusIdL :: Lens_' SymbolStatus (Maybe Integer)
symbolStatusIdL f SymbolStatus{..} = (\symbolStatusId -> SymbolStatus { symbolStatusId, ..} ) <$> f symbolStatusId
{-# INLINE symbolStatusIdL #-}

-- | 'symbolStatusAuctionPrice' Lens
symbolStatusAuctionPriceL :: Lens_' SymbolStatus (Maybe Double)
symbolStatusAuctionPriceL f SymbolStatus{..} = (\symbolStatusAuctionPrice -> SymbolStatus { symbolStatusAuctionPrice, ..} ) <$> f symbolStatusAuctionPrice
{-# INLINE symbolStatusAuctionPriceL #-}

-- | 'symbolStatusAuctionSize' Lens
symbolStatusAuctionSizeL :: Lens_' SymbolStatus (Maybe Double)
symbolStatusAuctionSizeL f SymbolStatus{..} = (\symbolStatusAuctionSize -> SymbolStatus { symbolStatusAuctionSize, ..} ) <$> f symbolStatusAuctionSize
{-# INLINE symbolStatusAuctionSizeL #-}

-- | 'symbolStatusAuctionTime' Lens
symbolStatusAuctionTimeL :: Lens_' SymbolStatus (Maybe Text)
symbolStatusAuctionTimeL f SymbolStatus{..} = (\symbolStatusAuctionTime -> SymbolStatus { symbolStatusAuctionTime, ..} ) <$> f symbolStatusAuctionTime
{-# INLINE symbolStatusAuctionTimeL #-}

-- | 'symbolStatusImbalance' Lens
symbolStatusImbalanceL :: Lens_' SymbolStatus (Maybe Double)
symbolStatusImbalanceL f SymbolStatus{..} = (\symbolStatusImbalance -> SymbolStatus { symbolStatusImbalance, ..} ) <$> f symbolStatusImbalance
{-# INLINE symbolStatusImbalanceL #-}



-- * TimeInForce



-- * TimeInForceStop



-- * UnauthorizedError

-- | 'unauthorizedErrorError' Lens
unauthorizedErrorErrorL :: Lens_' UnauthorizedError (Maybe Text)
unauthorizedErrorErrorL f UnauthorizedError{..} = (\unauthorizedErrorError -> UnauthorizedError { unauthorizedErrorError, ..} ) <$> f unauthorizedErrorError
{-# INLINE unauthorizedErrorErrorL #-}



-- * WhitelistEntry

-- | 'whitelistEntryWhitelistId' Lens
whitelistEntryWhitelistIdL :: Lens_' WhitelistEntry (Maybe Text)
whitelistEntryWhitelistIdL f WhitelistEntry{..} = (\whitelistEntryWhitelistId -> WhitelistEntry { whitelistEntryWhitelistId, ..} ) <$> f whitelistEntryWhitelistId
{-# INLINE whitelistEntryWhitelistIdL #-}

-- | 'whitelistEntryName' Lens
whitelistEntryNameL :: Lens_' WhitelistEntry (Maybe Text)
whitelistEntryNameL f WhitelistEntry{..} = (\whitelistEntryName -> WhitelistEntry { whitelistEntryName, ..} ) <$> f whitelistEntryName
{-# INLINE whitelistEntryNameL #-}

-- | 'whitelistEntryCurrency' Lens
whitelistEntryCurrencyL :: Lens_' WhitelistEntry (Maybe Text)
whitelistEntryCurrencyL f WhitelistEntry{..} = (\whitelistEntryCurrency -> WhitelistEntry { whitelistEntryCurrency, ..} ) <$> f whitelistEntryCurrency
{-# INLINE whitelistEntryCurrencyL #-}



-- * WithdrawalInfo

-- | 'withdrawalInfoWithdrawalId' Lens
withdrawalInfoWithdrawalIdL :: Lens_' WithdrawalInfo (Maybe Text)
withdrawalInfoWithdrawalIdL f WithdrawalInfo{..} = (\withdrawalInfoWithdrawalId -> WithdrawalInfo { withdrawalInfoWithdrawalId, ..} ) <$> f withdrawalInfoWithdrawalId
{-# INLINE withdrawalInfoWithdrawalIdL #-}

-- | 'withdrawalInfoAmount' Lens
withdrawalInfoAmountL :: Lens_' WithdrawalInfo (Double)
withdrawalInfoAmountL f WithdrawalInfo{..} = (\withdrawalInfoAmount -> WithdrawalInfo { withdrawalInfoAmount, ..} ) <$> f withdrawalInfoAmount
{-# INLINE withdrawalInfoAmountL #-}

-- | 'withdrawalInfoFee' Lens
withdrawalInfoFeeL :: Lens_' WithdrawalInfo (Maybe Double)
withdrawalInfoFeeL f WithdrawalInfo{..} = (\withdrawalInfoFee -> WithdrawalInfo { withdrawalInfoFee, ..} ) <$> f withdrawalInfoFee
{-# INLINE withdrawalInfoFeeL #-}

-- | 'withdrawalInfoCurrency' Lens
withdrawalInfoCurrencyL :: Lens_' WithdrawalInfo (Text)
withdrawalInfoCurrencyL f WithdrawalInfo{..} = (\withdrawalInfoCurrency -> WithdrawalInfo { withdrawalInfoCurrency, ..} ) <$> f withdrawalInfoCurrency
{-# INLINE withdrawalInfoCurrencyL #-}

-- | 'withdrawalInfoBeneficiary' Lens
withdrawalInfoBeneficiaryL :: Lens_' WithdrawalInfo (Text)
withdrawalInfoBeneficiaryL f WithdrawalInfo{..} = (\withdrawalInfoBeneficiary -> WithdrawalInfo { withdrawalInfoBeneficiary, ..} ) <$> f withdrawalInfoBeneficiary
{-# INLINE withdrawalInfoBeneficiaryL #-}

-- | 'withdrawalInfoState' Lens
withdrawalInfoStateL :: Lens_' WithdrawalInfo (Maybe WithdrawalStatus)
withdrawalInfoStateL f WithdrawalInfo{..} = (\withdrawalInfoState -> WithdrawalInfo { withdrawalInfoState, ..} ) <$> f withdrawalInfoState
{-# INLINE withdrawalInfoStateL #-}

-- | 'withdrawalInfoTimestamp' Lens
withdrawalInfoTimestampL :: Lens_' WithdrawalInfo (Maybe Integer)
withdrawalInfoTimestampL f WithdrawalInfo{..} = (\withdrawalInfoTimestamp -> WithdrawalInfo { withdrawalInfoTimestamp, ..} ) <$> f withdrawalInfoTimestamp
{-# INLINE withdrawalInfoTimestampL #-}



-- * WithdrawalStatus


