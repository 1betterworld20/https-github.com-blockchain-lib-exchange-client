/**
 * Blockchain.com Exchange REST API
 * ## Introduction Welcome to Blockchain.com's Exchange API and developer documentation. \\ These documents detail and give examples of various functionality offered by the API such as receiving real time market data, requesting balance information and performing trades. ## To Get Started Create or log into your existing Blockchain.com Exchange account \\ Select API from the drop down menu \\ Fill out form and click “Create New API Key Now” \\ Once generated you can view your keys under API Settings. \\ Please be aware that the API key can only be used once it was verified via email.  The API key must be set via the \\ `X-API-Token`\\ header.  The base URL to be used for all calls is \\ `https://api.blockchain.com/v3/exchange`  Autogenerated clients for this API can be found [here](https://github.com/blockchain/lib-exchange-client). 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import BaseOrder from '../com.blockchain.exchange.rest.model/BaseOrder';
import Fees from '../com.blockchain.exchange.rest.model/Fees';
import OrderStatus from '../com.blockchain.exchange.rest.model/OrderStatus';
import OrderSummary from '../com.blockchain.exchange.rest.model/OrderSummary';

/**
* Trading service.
* @module com.blockchain.exchange.rest/com.blockchain.exchange.rest.api/TradingApi
* @version 1.0.0
*/
export default class TradingApi {

    /**
    * Constructs a new TradingApi. 
    * @alias module:com.blockchain.exchange.rest/com.blockchain.exchange.rest.api/TradingApi
    * @class
    * @param {module:com.blockchain.exchange.rest/ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:com.blockchain.exchange.rest/ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createOrder operation.
     * @callback module:com.blockchain.exchange.rest/com.blockchain.exchange.rest.api/TradingApi~createOrderCallback
     * @param {String} error Error message, if any.
     * @param {module:com.blockchain.exchange.rest/com.blockchain.exchange.rest.model/OrderSummary} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add an order
     * @param {module:com.blockchain.exchange.rest/com.blockchain.exchange.rest.model/BaseOrder} baseOrder Trade
     * @param {module:com.blockchain.exchange.rest/com.blockchain.exchange.rest.api/TradingApi~createOrderCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.blockchain.exchange.rest/com.blockchain.exchange.rest.model/OrderSummary}
     */
    createOrder(baseOrder, callback) {
      let postBody = baseOrder;
      // verify the required parameter 'baseOrder' is set
      if (baseOrder === undefined || baseOrder === null) {
        throw new Error("Missing the required parameter 'baseOrder' when calling createOrder");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = OrderSummary;
      return this.apiClient.callApi(
        '/orders', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteAllOrders operation.
     * @callback module:com.blockchain.exchange.rest/com.blockchain.exchange.rest.api/TradingApi~deleteAllOrdersCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete all open orders (of a symbol, if specified)
     * @param {Object} opts Optional parameters
     * @param {String} opts.symbol 
     * @param {module:com.blockchain.exchange.rest/com.blockchain.exchange.rest.api/TradingApi~deleteAllOrdersCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteAllOrders(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'symbol': opts['symbol']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/orders', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteOrder operation.
     * @callback module:com.blockchain.exchange.rest/com.blockchain.exchange.rest.api/TradingApi~deleteOrderCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Cancel a trade
     * @param {Number} orderId Order ID
     * @param {module:com.blockchain.exchange.rest/com.blockchain.exchange.rest.api/TradingApi~deleteOrderCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteOrder(orderId, callback) {
      let postBody = null;
      // verify the required parameter 'orderId' is set
      if (orderId === undefined || orderId === null) {
        throw new Error("Missing the required parameter 'orderId' when calling deleteOrder");
      }

      let pathParams = {
        'orderId': orderId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/orders/{orderId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getFees operation.
     * @callback module:com.blockchain.exchange.rest/com.blockchain.exchange.rest.api/TradingApi~getFeesCallback
     * @param {String} error Error message, if any.
     * @param {module:com.blockchain.exchange.rest/com.blockchain.exchange.rest.model/Fees} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get current fee level
     * @param {module:com.blockchain.exchange.rest/com.blockchain.exchange.rest.api/TradingApi~getFeesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.blockchain.exchange.rest/com.blockchain.exchange.rest.model/Fees}
     */
    getFees(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Fees;
      return this.apiClient.callApi(
        '/fees', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getFills operation.
     * @callback module:com.blockchain.exchange.rest/com.blockchain.exchange.rest.api/TradingApi~getFillsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:com.blockchain.exchange.rest/com.blockchain.exchange.rest.model/OrderSummary>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a list of filled orders
     * Returns filled orders, including partial fills. Returns at most 100 results, use timestamp to paginate for further results
     * @param {Object} opts Optional parameters
     * @param {String} opts.symbol Only return results for this symbol
     * @param {Number} opts.from Epoch timestamp in ms
     * @param {Number} opts.to Epoch timestamp in ms
     * @param {Number} opts.limit Maximum amount of results to return in a single call. If omitted, 100 results are returned by default. 
     * @param {module:com.blockchain.exchange.rest/com.blockchain.exchange.rest.api/TradingApi~getFillsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:com.blockchain.exchange.rest/com.blockchain.exchange.rest.model/OrderSummary>}
     */
    getFills(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'symbol': opts['symbol'],
        'from': opts['from'],
        'to': opts['to'],
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [OrderSummary];
      return this.apiClient.callApi(
        '/trades', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrderById operation.
     * @callback module:com.blockchain.exchange.rest/com.blockchain.exchange.rest.api/TradingApi~getOrderByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:com.blockchain.exchange.rest/com.blockchain.exchange.rest.model/OrderSummary} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a specific order
     * @param {Number} orderId Order ID
     * @param {module:com.blockchain.exchange.rest/com.blockchain.exchange.rest.api/TradingApi~getOrderByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.blockchain.exchange.rest/com.blockchain.exchange.rest.model/OrderSummary}
     */
    getOrderById(orderId, callback) {
      let postBody = null;
      // verify the required parameter 'orderId' is set
      if (orderId === undefined || orderId === null) {
        throw new Error("Missing the required parameter 'orderId' when calling getOrderById");
      }

      let pathParams = {
        'orderId': orderId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = OrderSummary;
      return this.apiClient.callApi(
        '/orders/{orderId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrders operation.
     * @callback module:com.blockchain.exchange.rest/com.blockchain.exchange.rest.api/TradingApi~getOrdersCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:com.blockchain.exchange.rest/com.blockchain.exchange.rest.model/OrderSummary>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a list orders
     * Returns live and historic orders, defaulting to live orders. Returns at most 100 results, use timestamp to paginate for further results
     * @param {Object} opts Optional parameters
     * @param {String} opts.symbol Only return results for this symbol
     * @param {Number} opts.from Epoch timestamp in ms
     * @param {Number} opts.to Epoch timestamp in ms
     * @param {module:com.blockchain.exchange.rest/com.blockchain.exchange.rest.model/OrderStatus} opts.status Order Status
     * @param {Number} opts.limit Maximum amount of results to return in a single call. If omitted, 100 results are returned by default. 
     * @param {module:com.blockchain.exchange.rest/com.blockchain.exchange.rest.api/TradingApi~getOrdersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:com.blockchain.exchange.rest/com.blockchain.exchange.rest.model/OrderSummary>}
     */
    getOrders(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'symbol': opts['symbol'],
        'from': opts['from'],
        'to': opts['to'],
        'status': opts['status'],
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [OrderSummary];
      return this.apiClient.callApi(
        '/orders', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
