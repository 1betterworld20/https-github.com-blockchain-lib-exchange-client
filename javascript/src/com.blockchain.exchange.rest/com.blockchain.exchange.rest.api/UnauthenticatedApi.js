/**
 * Blockchain.com Exchange REST API
 * ## Introduction Welcome to Blockchain.com's Exchange API and developer documentation. \\ These documents detail and give examples of various functionality offered by the API such as receiving real time market data, requesting balance information and performing trades. ## To Get Started Create or log into your existing Blockchain.com Exchange account \\ Select API from the drop down menu \\ Fill out form and click “Create New API Key Now” \\ Once generated you can view your keys under API Settings. \\ Please be aware that the API key can only be used once it was verified via email.  The API key must be set via the \\ `X-API-Token`\\ header.  The base URL to be used for all calls is \\ `https://api.blockchain.com/v3/exchange`  Autogenerated clients for this API can be found [here](https://github.com/blockchain/lib-exchange-client). 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import OrderBook from '../com.blockchain.exchange.rest.model/OrderBook';
import PriceEvent from '../com.blockchain.exchange.rest.model/PriceEvent';
import SymbolStatus from '../com.blockchain.exchange.rest.model/SymbolStatus';

/**
* Unauthenticated service.
* @module com.blockchain.exchange.rest/com.blockchain.exchange.rest.api/UnauthenticatedApi
* @version 1.0.0
*/
export default class UnauthenticatedApi {

    /**
    * Constructs a new UnauthenticatedApi. 
    * @alias module:com.blockchain.exchange.rest/com.blockchain.exchange.rest.api/UnauthenticatedApi
    * @class
    * @param {module:com.blockchain.exchange.rest/ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:com.blockchain.exchange.rest/ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the getL2OrderBook operation.
     * @callback module:com.blockchain.exchange.rest/com.blockchain.exchange.rest.api/UnauthenticatedApi~getL2OrderBookCallback
     * @param {String} error Error message, if any.
     * @param {module:com.blockchain.exchange.rest/com.blockchain.exchange.rest.model/OrderBook} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * L2 Order Book
     * Level 2 Order Book data is available through the l2 channel. Each entry in bids and asks arrays is a price level, along with its price (px), quantity (qty) and number of orders (num) attributes.
     * @param {String} symbol Symbol
     * @param {module:com.blockchain.exchange.rest/com.blockchain.exchange.rest.api/UnauthenticatedApi~getL2OrderBookCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.blockchain.exchange.rest/com.blockchain.exchange.rest.model/OrderBook}
     */
    getL2OrderBook(symbol, callback) {
      let postBody = null;
      // verify the required parameter 'symbol' is set
      if (symbol === undefined || symbol === null) {
        throw new Error("Missing the required parameter 'symbol' when calling getL2OrderBook");
      }

      let pathParams = {
        'symbol': symbol
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = OrderBook;
      return this.apiClient.callApi(
        '/l2/{symbol}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getL3OrderBook operation.
     * @callback module:com.blockchain.exchange.rest/com.blockchain.exchange.rest.api/UnauthenticatedApi~getL3OrderBookCallback
     * @param {String} error Error message, if any.
     * @param {module:com.blockchain.exchange.rest/com.blockchain.exchange.rest.model/OrderBook} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * L3 Order Book
     * Level 3 Order Book data is available through the l3 channel. Each entry in bids and asks arrays is an order, along with its id (id), price (px) and quantity (qty) attributes. In contrast to the L2 order book, the L3 order book contains all individual orders without aggregation.
     * @param {String} symbol Symbol
     * @param {module:com.blockchain.exchange.rest/com.blockchain.exchange.rest.api/UnauthenticatedApi~getL3OrderBookCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.blockchain.exchange.rest/com.blockchain.exchange.rest.model/OrderBook}
     */
    getL3OrderBook(symbol, callback) {
      let postBody = null;
      // verify the required parameter 'symbol' is set
      if (symbol === undefined || symbol === null) {
        throw new Error("Missing the required parameter 'symbol' when calling getL3OrderBook");
      }

      let pathParams = {
        'symbol': symbol
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = OrderBook;
      return this.apiClient.callApi(
        '/l3/{symbol}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSymbolByName operation.
     * @callback module:com.blockchain.exchange.rest/com.blockchain.exchange.rest.api/UnauthenticatedApi~getSymbolByNameCallback
     * @param {String} error Error message, if any.
     * @param {module:com.blockchain.exchange.rest/com.blockchain.exchange.rest.model/SymbolStatus} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Symbols
     * When the symbol is not halted the auction data in the message may be blank. When a symbol is in a halt state the auction data will populate as the book builds. When an opening time has been chosen, the auction-time field will show the opening time. Subsequent updates will be sent only if the symbol status changes in any way.
     * @param {String} symbol Symbol
     * @param {module:com.blockchain.exchange.rest/com.blockchain.exchange.rest.api/UnauthenticatedApi~getSymbolByNameCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.blockchain.exchange.rest/com.blockchain.exchange.rest.model/SymbolStatus}
     */
    getSymbolByName(symbol, callback) {
      let postBody = null;
      // verify the required parameter 'symbol' is set
      if (symbol === undefined || symbol === null) {
        throw new Error("Missing the required parameter 'symbol' when calling getSymbolByName");
      }

      let pathParams = {
        'symbol': symbol
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SymbolStatus;
      return this.apiClient.callApi(
        '/symbols/{symbol}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSymbols operation.
     * @callback module:com.blockchain.exchange.rest/com.blockchain.exchange.rest.api/UnauthenticatedApi~getSymbolsCallback
     * @param {String} error Error message, if any.
     * @param {Object.<String, module:com.blockchain.exchange.rest/com.blockchain.exchange.rest.model/{String: SymbolStatus}>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Symbols
     * When the symbol is not halted the auction data in the message may be blank. When a symbol is in a halt state the auction data will populate as the book builds. When an opening time has been chosen, the auction-time field will show the opening time. Subsequent updates will be sent only if the symbol status changes in any way.
     * @param {module:com.blockchain.exchange.rest/com.blockchain.exchange.rest.api/UnauthenticatedApi~getSymbolsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object.<String, module:com.blockchain.exchange.rest/com.blockchain.exchange.rest.model/{String: SymbolStatus}>}
     */
    getSymbols(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = {'String': SymbolStatus};
      return this.apiClient.callApi(
        '/symbols', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getTickerBySymbol operation.
     * @callback module:com.blockchain.exchange.rest/com.blockchain.exchange.rest.api/UnauthenticatedApi~getTickerBySymbolCallback
     * @param {String} error Error message, if any.
     * @param {module:com.blockchain.exchange.rest/com.blockchain.exchange.rest.model/PriceEvent} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Price
     * @param {String} symbol Symbol
     * @param {module:com.blockchain.exchange.rest/com.blockchain.exchange.rest.api/UnauthenticatedApi~getTickerBySymbolCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.blockchain.exchange.rest/com.blockchain.exchange.rest.model/PriceEvent}
     */
    getTickerBySymbol(symbol, callback) {
      let postBody = null;
      // verify the required parameter 'symbol' is set
      if (symbol === undefined || symbol === null) {
        throw new Error("Missing the required parameter 'symbol' when calling getTickerBySymbol");
      }

      let pathParams = {
        'symbol': symbol
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PriceEvent;
      return this.apiClient.callApi(
        '/tickers/{symbol}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getTickers operation.
     * @callback module:com.blockchain.exchange.rest/com.blockchain.exchange.rest.api/UnauthenticatedApi~getTickersCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:com.blockchain.exchange.rest/com.blockchain.exchange.rest.model/PriceEvent>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Price
     * @param {module:com.blockchain.exchange.rest/com.blockchain.exchange.rest.api/UnauthenticatedApi~getTickersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:com.blockchain.exchange.rest/com.blockchain.exchange.rest.model/PriceEvent>}
     */
    getTickers(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [PriceEvent];
      return this.apiClient.callApi(
        '/tickers', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
