/**
 * Blockchain.com Exchange REST API
 * ## Introduction Welcome to Blockchain.com's Exchange API and developer documentation. These documents detail and give examples of various functionality offered by the API such as receiving real time market data, requesting balance information and performing trades. ## To Get Started Create or log into your existing Blockchain.com Exchange account Select API from the drop down menu Fill out form and click “Create New API Key Now” Once generated you can view your keys under API Settings 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Side from './Side';
import TimeInForce from './TimeInForce';

/**
 * The BaseOrder model module.
 * @module com.blockchain.exchange.rest/com.blockchain.exchange.rest.model/BaseOrder
 * @version 1.0.0
 */
class BaseOrder {
    /**
     * Constructs a new <code>BaseOrder</code>.
     * @alias module:com.blockchain.exchange.rest/com.blockchain.exchange.rest.model/BaseOrder
     * @param clOrdId {String} Reference field provided by client and cannot exceed 20 characters
     * @param symbol {String} Blockchain symbol identifier
     * @param side {module:com.blockchain.exchange.rest/com.blockchain.exchange.rest.model/Side} 
     * @param orderQty {Number} The order size in the terms of the base currency
     */
    constructor(clOrdId, symbol, side, orderQty) { 
        
        BaseOrder.initialize(this, clOrdId, symbol, side, orderQty);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, clOrdId, symbol, side, orderQty) { 
        obj['clOrdId'] = clOrdId;
        obj['symbol'] = symbol;
        obj['side'] = side;
        obj['orderQty'] = orderQty;
    }

    /**
     * Constructs a <code>BaseOrder</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:com.blockchain.exchange.rest/com.blockchain.exchange.rest.model/BaseOrder} obj Optional instance to populate.
     * @return {module:com.blockchain.exchange.rest/com.blockchain.exchange.rest.model/BaseOrder} The populated <code>BaseOrder</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new BaseOrder();

            if (data.hasOwnProperty('ordType')) {
                obj['ordType'] = ApiClient.convertToType(data['ordType'], 'String');
            }
            if (data.hasOwnProperty('clOrdId')) {
                obj['clOrdId'] = ApiClient.convertToType(data['clOrdId'], 'String');
            }
            if (data.hasOwnProperty('symbol')) {
                obj['symbol'] = ApiClient.convertToType(data['symbol'], 'String');
            }
            if (data.hasOwnProperty('side')) {
                obj['side'] = Side.constructFromObject(data['side']);
            }
            if (data.hasOwnProperty('orderQty')) {
                obj['orderQty'] = ApiClient.convertToType(data['orderQty'], 'Number');
            }
            if (data.hasOwnProperty('timeInForce')) {
                obj['timeInForce'] = TimeInForce.constructFromObject(data['timeInForce']);
            }
            if (data.hasOwnProperty('price')) {
                obj['price'] = ApiClient.convertToType(data['price'], 'Number');
            }
            if (data.hasOwnProperty('expireDate')) {
                obj['expireDate'] = ApiClient.convertToType(data['expireDate'], 'Number');
            }
            if (data.hasOwnProperty('minQty')) {
                obj['minQty'] = ApiClient.convertToType(data['minQty'], 'Number');
            }
            if (data.hasOwnProperty('stopPx')) {
                obj['stopPx'] = ApiClient.convertToType(data['stopPx'], 'Number');
            }
        }
        return obj;
    }


}

/**
 * @member {module:com.blockchain.exchange.rest/com.blockchain.exchange.rest.model/BaseOrder.OrdTypeEnum} ordType
 */
BaseOrder.prototype['ordType'] = undefined;

/**
 * Reference field provided by client and cannot exceed 20 characters
 * @member {String} clOrdId
 */
BaseOrder.prototype['clOrdId'] = undefined;

/**
 * Blockchain symbol identifier
 * @member {String} symbol
 */
BaseOrder.prototype['symbol'] = undefined;

/**
 * @member {module:com.blockchain.exchange.rest/com.blockchain.exchange.rest.model/Side} side
 */
BaseOrder.prototype['side'] = undefined;

/**
 * The order size in the terms of the base currency
 * @member {Number} orderQty
 */
BaseOrder.prototype['orderQty'] = undefined;

/**
 * @member {module:com.blockchain.exchange.rest/com.blockchain.exchange.rest.model/TimeInForce} timeInForce
 */
BaseOrder.prototype['timeInForce'] = undefined;

/**
 * The limit price for the order
 * @member {Number} price
 */
BaseOrder.prototype['price'] = undefined;

/**
 * expiry date in the format YYYYMMDD
 * @member {Number} expireDate
 */
BaseOrder.prototype['expireDate'] = undefined;

/**
 * The minimum quantity required for an IOC fill
 * @member {Number} minQty
 */
BaseOrder.prototype['minQty'] = undefined;

/**
 * The limit price for the order
 * @member {Number} stopPx
 */
BaseOrder.prototype['stopPx'] = undefined;





/**
 * Allowed values for the <code>ordType</code> property.
 * @enum {String}
 * @readonly
 */
BaseOrder['OrdTypeEnum'] = {

    /**
     * value: "MARKET"
     * @const
     */
    "MARKET": "MARKET",

    /**
     * value: "LIMIT"
     * @const
     */
    "LIMIT": "LIMIT",

    /**
     * value: "STOP"
     * @const
     */
    "STOP": "STOP",

    /**
     * value: "STOPLIMIT"
     * @const
     */
    "STOPLIMIT": "STOPLIMIT"
};



export default BaseOrder;

