/**
 * Blockchain.com Exchange REST API
 * ## Introduction Welcome to Blockchain.com's Exchange API and developer documentation. \\ These documents detail and give examples of various functionality offered by the API such as receiving real time market data, requesting balance information and performing trades. ## To Get Started Create or log into your existing Blockchain.com Exchange account \\ Select API from the drop down menu \\ Fill out form and click “Create New API Key Now” \\ Once generated you can view your keys under API Settings. \\ Please be aware that the API key can only be used once it was verified via email.  The API key must be set via the \\ `X-API-Token`\\ header.  The base URL to be used for all calls is \\ `https://api.blockchain.com/v3/exchange`  Autogenerated clients for this API can be found [here](https://github.com/blockchain/lib-exchange-client). 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import OrdType from './OrdType';
import OrderStatus from './OrderStatus';
import Side from './Side';

/**
 * The OrderSummary model module.
 * @module com.blockchain.exchange.rest/com.blockchain.exchange.rest.model/OrderSummary
 * @version 1.0.0
 */
class OrderSummary {
    /**
     * Constructs a new <code>OrderSummary</code>.
     * @alias module:com.blockchain.exchange.rest/com.blockchain.exchange.rest.model/OrderSummary
     * @param clOrdId {String} Reference field provided by client. Cannot exceed 20 characters, only alphanumeric characters are allowed.
     * @param ordType {module:com.blockchain.exchange.rest/com.blockchain.exchange.rest.model/OrdType} 
     * @param ordStatus {module:com.blockchain.exchange.rest/com.blockchain.exchange.rest.model/OrderStatus} 
     * @param side {module:com.blockchain.exchange.rest/com.blockchain.exchange.rest.model/Side} 
     * @param symbol {String} Blockchain symbol identifier
     */
    constructor(clOrdId, ordType, ordStatus, side, symbol) { 
        
        OrderSummary.initialize(this, clOrdId, ordType, ordStatus, side, symbol);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, clOrdId, ordType, ordStatus, side, symbol) { 
        obj['clOrdId'] = clOrdId;
        obj['ordType'] = ordType;
        obj['ordStatus'] = ordStatus;
        obj['side'] = side;
        obj['symbol'] = symbol;
    }

    /**
     * Constructs a <code>OrderSummary</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:com.blockchain.exchange.rest/com.blockchain.exchange.rest.model/OrderSummary} obj Optional instance to populate.
     * @return {module:com.blockchain.exchange.rest/com.blockchain.exchange.rest.model/OrderSummary} The populated <code>OrderSummary</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new OrderSummary();

            if (data.hasOwnProperty('exOrdId')) {
                obj['exOrdId'] = ApiClient.convertToType(data['exOrdId'], 'Number');
            }
            if (data.hasOwnProperty('clOrdId')) {
                obj['clOrdId'] = ApiClient.convertToType(data['clOrdId'], 'String');
            }
            if (data.hasOwnProperty('ordType')) {
                obj['ordType'] = OrdType.constructFromObject(data['ordType']);
            }
            if (data.hasOwnProperty('ordStatus')) {
                obj['ordStatus'] = OrderStatus.constructFromObject(data['ordStatus']);
            }
            if (data.hasOwnProperty('side')) {
                obj['side'] = Side.constructFromObject(data['side']);
            }
            if (data.hasOwnProperty('price')) {
                obj['price'] = ApiClient.convertToType(data['price'], 'Number');
            }
            if (data.hasOwnProperty('text')) {
                obj['text'] = ApiClient.convertToType(data['text'], 'String');
            }
            if (data.hasOwnProperty('symbol')) {
                obj['symbol'] = ApiClient.convertToType(data['symbol'], 'String');
            }
            if (data.hasOwnProperty('lastShares')) {
                obj['lastShares'] = ApiClient.convertToType(data['lastShares'], 'Number');
            }
            if (data.hasOwnProperty('lastPx')) {
                obj['lastPx'] = ApiClient.convertToType(data['lastPx'], 'Number');
            }
            if (data.hasOwnProperty('leavesQty')) {
                obj['leavesQty'] = ApiClient.convertToType(data['leavesQty'], 'Number');
            }
            if (data.hasOwnProperty('cumQty')) {
                obj['cumQty'] = ApiClient.convertToType(data['cumQty'], 'Number');
            }
            if (data.hasOwnProperty('avgPx')) {
                obj['avgPx'] = ApiClient.convertToType(data['avgPx'], 'Number');
            }
            if (data.hasOwnProperty('timestamp')) {
                obj['timestamp'] = ApiClient.convertToType(data['timestamp'], 'Number');
            }
        }
        return obj;
    }


}

/**
 * The unique order id assigned by the exchange
 * @member {Number} exOrdId
 */
OrderSummary.prototype['exOrdId'] = undefined;

/**
 * Reference field provided by client. Cannot exceed 20 characters, only alphanumeric characters are allowed.
 * @member {String} clOrdId
 */
OrderSummary.prototype['clOrdId'] = undefined;

/**
 * @member {module:com.blockchain.exchange.rest/com.blockchain.exchange.rest.model/OrdType} ordType
 */
OrderSummary.prototype['ordType'] = undefined;

/**
 * @member {module:com.blockchain.exchange.rest/com.blockchain.exchange.rest.model/OrderStatus} ordStatus
 */
OrderSummary.prototype['ordStatus'] = undefined;

/**
 * @member {module:com.blockchain.exchange.rest/com.blockchain.exchange.rest.model/Side} side
 */
OrderSummary.prototype['side'] = undefined;

/**
 * The limit price for the order
 * @member {Number} price
 */
OrderSummary.prototype['price'] = undefined;

/**
 * The reason for rejecting the order, if applicable
 * @member {String} text
 */
OrderSummary.prototype['text'] = undefined;

/**
 * Blockchain symbol identifier
 * @member {String} symbol
 */
OrderSummary.prototype['symbol'] = undefined;

/**
 * The executed quantity for the order's last fill
 * @member {Number} lastShares
 */
OrderSummary.prototype['lastShares'] = undefined;

/**
 * The executed price for the last fill
 * @member {Number} lastPx
 */
OrderSummary.prototype['lastPx'] = undefined;

/**
 * For Open and Partially Filled orders this is the remaining quantity open for execution. For Canceled and Expired orders this is the quantity than was still open before cancellation/expiration. For Rejected order this is equal to orderQty. For other states this is always zero.
 * @member {Number} leavesQty
 */
OrderSummary.prototype['leavesQty'] = undefined;

/**
 * The quantity of the order which has been filled
 * @member {Number} cumQty
 */
OrderSummary.prototype['cumQty'] = undefined;

/**
 * Calculated the Volume Weighted Average Price of all fills for this order
 * @member {Number} avgPx
 */
OrderSummary.prototype['avgPx'] = undefined;

/**
 * Time in ms since 01/01/1970 (epoch)
 * @member {Number} timestamp
 */
OrderSummary.prototype['timestamp'] = undefined;






export default OrderSummary;

